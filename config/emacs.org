#+title: Emacs configuration

* early init
:PROPERTIES:
:header-args: :tangle emacs/early-init.el :lexical t
:END:
** lexical binding
Always use lexical binding. *ALWAYS*.
#+begin_src elisp
;; -*- lexical-binding: t -*-
#+end_src

** =package.el=
Disable usage of =package.el=.

#+begin_src elisp
(setq package-enable-at-startup nil
      package-archives nil)
#+end_src

** garbage collector
Pratically disable the garbage collector during initialization. When fully initialized, revert back.

#+begin_src elisp
(setq gc-cons-threshold most-positive-fixnum
      gc-cons-percentage 0.6)

(add-hook 'emacs-startup-hook
    (lambda ()
      (setq gc-cons-threshold gc-cons-threshold
            gc-cons-percentage gc-cons-percentage)))
#+end_src

** =default.el= and =site-start.el=
Disable loading those files.

#+begin_src elisp
(setq site-run-file nil
      inhibit-default-init t)
#+end_src

** splash screen
Disable displaying splash screen on start.

#+begin_src elisp
(setq inhibit-startup-screen t
      inhibit-startup-buffer-menu t)
#+end_src

** automatic resize
Disable automatic resize without any confirmation.

#+begin_src elisp
(setq frame-inhibit-implied-resize t)
#+end_src

* init
:PROPERTIES:
:header-args: :tangle emacs/init.el :lexical t
:END:
** lexical binding
Always use lexical binding. *ALWAYS*. Use the XDG Base Directory spec and include some handy utilities to work on =alist.=
#+begin_src elisp
;; -*- lexical-binding: t -*-

(require 'xdg)
(require 'map)
#+end_src

** compilation
*** "native"
Set native compilation cache path to xdg cache. Also, don't compile when the editor is running, which could cause freezes. Only works after 29.0 and when native-comp is activated on the distribution. I believe Void Linux disables it by default.
#+begin_src elisp
(when (fboundp 'native-compile-async)
  (setq native-comp-deferred-compilation nil
        comp-deferred-compilation nil)
  (push
   (expand-file-name "emacs/native-lisp" (xdg-cache-home))
   native-comp-eln-load-path))
#+end_src

*** bytecode
Disable some byte compiler warnings. A lot of old packages just piss of the compiler. Maybe there's a more considerate way of doing this.
#+begin_src elisp
(setq warning-suppress-types '((comp))
      byte-compile-warnings
      '(not obsolete interactive-only lexical docstrings)
      load-prefer-newer t)
#+end_src

** startup statistics
Display a message after initialization showing startup time and garbage collections.
#+begin_src elisp
(add-hook 'emacs-startup-hook
    (lambda ()
      (message "Emacs loaded in %s with %d garbage collections."
         (format "%.2f seconds"
           (float-time
            (time-subtract after-init-time before-init-time)))
         gcs-done)))
#+end_src

** standard directories
Add some directories to better integrate with the system. Prevent packages from littering =user-emacs-directory= and any other directories.

#+begin_src elisp
(setq user-emacs-directory (expand-file-name "emacs" (xdg-config-home)))

(push user-emacs-directory load-path)
(push (expand-file-name "~/lib/elisp") load-path)

(setq temporary-file-directory
      (expand-file-name "emacs/" (xdg-runtime-dir)))

(unless (file-exists-p temporary-file-directory)
  (make-directory temporary-file-directory))
#+end_src

** package manager
*** elpaca
#+begin_src elisp
(defvar elpaca-installer-version 0.5)

(defvar elpaca-directory (expand-file-name "emacs/elpaca/" (xdg-data-home)))
(defvar elpaca-builds-directory (expand-file-name "builds/" elpaca-directory))
(defvar elpaca-repos-directory (expand-file-name "repos/" elpaca-directory))

(defvar elpaca-order '(elpaca :repo "https://github.com/progfolio/elpaca.git"
                              :ref nil
                              :files (:defaults (:exclude "extensions"))
                              :build (:not elpaca--activate-package)))

(let* ((repo  (expand-file-name "elpaca/" elpaca-repos-directory))
       (build (expand-file-name "elpaca/" elpaca-builds-directory))
       (order (cdr elpaca-order))
       (default-directory repo))
  (add-to-list 'load-path (if (file-exists-p build) build repo))
  ;; clone elpaca and byte-compile it
  (unless (file-exists-p repo)
    (make-directory repo t)
    (when (< emacs-major-version 28) (require 'subr-x))
    (condition-case-unless-debug err
        (if-let ((buffer (pop-to-buffer-same-window "*elpaca-bootstrap*"))
                 ((zerop (call-process "git" nil buffer t "clone"
                                       (plist-get order :repo) repo)))
                 ((zerop (call-process "git" nil buffer t "checkout"
                                       (or (plist-get order :ref) "--"))))
                 (emacs (concat invocation-directory invocation-name))
                 ((zerop (call-process emacs nil buffer nil "-Q" "-L" "." "--batch"
                                       "--eval" "(byte-recompile-directory \".\" 0 'force)")))
                 ((require 'elpaca))
                 ((elpaca-generate-autoloads "elpaca" repo)))
            (progn (message "%s" (buffer-string)) (kill-buffer buffer))
          (error "%s" (with-current-buffer buffer (buffer-string))))
      ((error) (warn "%s" err) (delete-directory repo 'recursive))))
  (unless (require 'elpaca-autoloads nil t)
    (require 'elpaca)
    (elpaca-generate-autoloads "elpaca" repo)
    (load "./elpaca-autoloads")))
#+end_src

The reason why src_elisp{`elpaca-order'} is weirdly passed by splicing inside backquotes (that's really stupid) is because the first element of the order is used inside the src_elisp{`elpaca'} macro to make a new symbol at /compile time/, so you need to expand src_elisp{`elpaca-order'} before src_elisp{`elpaca'} gets called/executed. I don't like this at all.

#+begin_src elisp
(add-hook 'after-init-hook #'elpaca-process-queues)
(elpaca `(,@elpaca-order))

(elpaca elpaca-use-package
  (elpaca-use-package-mode)
  (setq elpaca-use-package-by-default t))

(elpaca-wait)
#+end_src

** littering
#+begin_src elisp
(use-package no-littering
  :custom
  (no-littering-etc-directory (expand-file-name "etc/" user-emacs-directory))
  (no-littering-var-directory (expand-file-name "emacs/" (xdg-data-home))))
#+end_src

** text encoding
#+begin_src elisp
(use-package mule
  :elpaca nil
  :config
  (prefer-coding-system          'utf-8)
  (set-default-coding-systems    'utf-8-unix)
  (set-selection-coding-system   'utf-8-unix)
  (set-buffer-file-coding-system 'utf-8-unix)
  (set-terminal-coding-system    'utf-8)
  (set-keyboard-coding-system    'utf-8)
  (set-file-name-coding-system   'utf-8)
  (set-clipboard-coding-system   'utf-8)

  (when (eq system-type 'windows-nt)
    (set-w32-system-coding-system 'utf-8))

  (set-language-environment "UTF-8"))
#+end_src

** modal editting
#+begin_src elisp
(defun meow-setup ()
    (setq meow-cheatsheet-layout meow-cheatsheet-layout-qwerty)
    (meow-motion-overwrite-define-key
     '("j" . meow-next)
     '("k" . meow-prev)
     '("<escape>" . ignore))
    (meow-leader-define-key
     '("h" . "C-h")
     '("/" . meow-keypad-describe-key)
     '("?" . meow-cheatsheet))
    (meow-normal-define-key
     '("1" . meow-expand-1)
     '("2" . meow-expand-2)
     '("3" . meow-expand-3)
     '("4" . meow-expand-4)
     '("5" . meow-expand-5)
     '("6" . meow-expand-6)
     '("7" . meow-expand-7)
     '("8" . meow-expand-8)
     '("9" . meow-expand-9)
     '("0" . meow-expand-0)
     '("-" . negative-argument)
     '("=" . undefined)
     ; TODO <backspace>

     '("!" . undefined)
     '("@" . undefined)
     '("#" . undefined)
     '("$" . move-end-of-line)
     '("%" . undefined)
     '("^" . move-beginning-of-line)
     '("&" . undefined)
     '("*" . meow-universal-argument)
     '("(" . backward-list)
     '(")" . forward-list)
     '("_" . undefined)
     '("+" . undefined)

     ; TODO <tab>
     '("q" . meow-quit)
     '("w" . meow-mark-word)
     '("e" . meow-next-word)
     '("r" . meow-replace)
     '("t" . meow-till)
     '("y" . meow-save) ; this really is meow-yank
     '("u" . meow-undo)
     '("i" . meow-insert)
     '("o" . meow-open-below)
     '("p" . meow-yank)
     '("[" . meow-beginning-of-thing)
     '("]" . meow-end-of-thing)
     '("\\" . undefined)

     ; TODO S-TAB
     '("Q" . undefined)
     '("W" . meow-mark-symbol)
     '("E" . meow-next-symbol)
     '("R" . meow-swap-grab)
     '("T" . undefined)
     '("Y" . meow-sync-grab)
     '("U" . meow-undo-in-selection)
     '("I" . meow-open-above)
     '("O" . meow-to-block)
     '("P" . undefined)
     '("{" . undefined)
     '("}" . undefined)
     '("|" . undefined)

     '("<escape>" . ignore)
     '("a" . meow-append)
     '("s" . meow-kill)
     '("d" . meow-delete)
     '("f" . meow-find)
     '("g" . meow-cancel-selection)
     '("h" . meow-left)
     '("i" . meow-insert)
     '("j" . meow-next)
     '("k" . meow-prev)
     '("l" . meow-right)
     '(";" . meow-reverse)
     '("'" . repeat)
     ; TODO <return>

     '("A" . meow-append)
     '("S" . undefined)
     '("D" . meow-backward-delete)
     '("F" . undefined)
     '("G" . meow-grab)
     '("H" . meow-left-expand)
     '("I" . undefined)
     '("J" . meow-next-expand)
     '("K" . meow-prev-expand)
     '("L" . meow-right-expand)
     '(":" . meow-goto-line)
     '("\"" . undefined)

     '("z" . meow-pop-selection)
     '("x" . undefined)
     '("c" . meow-change)
     '("v" . meow-visit)
     '("b" . meow-back-word)
     '("n" . meow-search)
     '("m" . meow-join)
     '("," . meow-inner-of-thing)
     '("." . meow-bounds-of-thing)
     '("/" . isearch-forward-regexp)

     '("Z" . undefined)
     '("X" . meow-goto-line)
     '("C" . meow-block)
     '("V" . meow-line)
     '("B" . meow-back-symbol)
     '("N" . undefined)
     '("M" . undefined)
     '("<" . undefined)
     '(">" . undefined)
     '("?" . isearch-backward-regexp)
     ))

(use-package meow
  :config
  (meow-setup)
  (setq meow-use-clipboard t
        meow-visit-sanitize-completion nil)
  (meow-global-mode 1)
  (setq-default meow-cursor-type-insert 'box
                meow-cursor-type-beacon 'box
                meow-cursor-type-normal 'box
                meow-cursor-type-keypad 'box
                meow-cursor-type-motion 'box
                meow-cursor-type-default 'box
                meow-cursor-type-region-cursor 'box
                ))
#+end_src

** better defaults?
*** auto save
#+begin_src elisp
(setq delete-auto-save-files t
      auto-save-list-file-prefix
      (expand-file-name "auto-save" temporary-file-directory)
      auto-save-default nil
      auto-save-file-name-transforms
       `((".*" ,temporary-file-directory t)))

(auto-save-mode -1)
#+end_src

*** lock files
#+begin_src elisp
(setq create-lockfiles nil)
#+end_src

*** backup files
#+begin_src elisp
(setq backup-directory-alist
      `(("." . ,(expand-file-name "backup" temporary-file-directory))
        (,tramp-file-name-regexp . nil))
      make-backup-files t)
#+end_src

*** =custom.el=
Keep custom from writting to src_elisp{`user-init-file'}.

#+begin_src elisp
(setq custom-file (expand-file-name "custom.el" user-emacs-directory))

(when (file-exists-p custom-file)
  (load custom-file 'noerror))
#+end_src

*** interactive
Always confirm before killing an external process. Use short answers for boolean interactive forms. "y" or "n", instead of "yes" or "no".

#+begin_src elisp
(setq confirm-kill-processes t)

(if (version< emacs-version "28.1")
    (defalias 'yes-or-no-p 'y-or-n-p)
  (setq use-short-answers t))
#+end_src

*** remembering point
It makes no sense to record the POINT of last access to a file if you can't even read it. Just disable it.

#+begin_src elisp
(setq-default save-place-forget-unreadable-files t)
#+end_src

*** scratch buffer
Don't append anything at the beggining of the scratch buffer on creation. By default a comment is inserted explaining the behaviour of src_elisp{`lisp-interaction-mode'}.

#+begin_src elisp
(setq initial-scratch-message nil)
#+end_src

*** whitespace
Don't add newlines when scrolling to bottom. Put a newline at the end of all files. Remove useless whitespace on save.

#+begin_src elisp
(setq next-line-add-newlines nil
      require-final-newline t)

(add-hook 'before-save-hook 'delete-trailing-whitespace)
#+end_src

*** filesystem operations
Instead of deleting nodes, move them to trash.

#+begin_src elisp
(setq-default delete-by-moving-to-trash t)
#+end_src

*** message buffer
On a long running session, such as using the daemon and only suspending the machine, the src_elisp{`*Messages*'} buffer could get quite large. Let's prevent this by truncating the buffer when it gets to a certain line count.

#+begin_src elisp
(setq-default message-log-max 1000)
#+end_src

** key bindings
This assumes that this version of Emacs has the `bind-key' included in the default distribution.

#+begin_src elisp
(require 'bind-key)

(bind-keys
 ("DEL" . backward-delete-char)
 ("C-c w s b" . split-window-below)
 ("C-c w s r" . split-window-right)
 ("C-c w d"   . delete-window)
 ("C-c w h"   . windmove-left)
 ("C-c w j"   . windmove-down)
 ("C-c w k"   . windmove-up)
 ("C-c w l"   . windmove-right)
 ("C--"       . text-scale-decrease)
 ("C-="       . text-scale-increase)
 ("C-c f d"   . delete-frame)
 ("C-c f m"   . make-frame)
 ("C-c i d"   . yeet/insert-date)
 ("C-c s"     . async-shell-command)
 ("C-c c"     . compile)
 ("C-c t t"   . toggle-truncate-lines)
 ("C-c b i"   . ibuffer)
 ("C-c p u"   . elpaca-manager)
 ("C-c p r"   . elpaca-recipe))
#+end_src

** formatting and navigation
Stop =electric= from indent things automatically. Highlight matching pairs of characters. Use tabs for indentation with 2 characters wide =TAB=.

#+begin_src elisp
(use-package electric
  :elpaca nil
  :custom (electric-indent-inhibit t)
  ;; disable auto-identation
  :config (electric-indent-mode nil))

(use-package elec-pair
  :elpaca nil
  :after electric
  :custom (electric-pair-skip-self t)
          (electric-pair-pairs
           '((?\{ . ?\})
             (?\( . ?\))
             (?\[ . ?\])))
  ;; TODO refactor to use hooks instead
  :config (electric-pair-mode t))

(show-paren-mode 1)

(setq-default tab-width 2
              indent-tabs-mode t
              fill-column 70
              truncate-lines nil)
#+end_src

** visuals
When running on a non-graphic display (terminal, for example), by default Emacs does some trickery to make the cursor stand out. Disable that.

#+begin_src elisp
(blink-cursor-mode -1)
(setq visible-cursor nil)
#+end_src

** case conversions
#+begin_src elisp
;; don't ask for confirmation when changing region case
(put 'downcase-region 'disabled nil)
(put 'upcase-region   'disabled nil)

(use-package titlecase
  :commands titlecase-region)
#+end_src

** keyboard shortcut hints
When pressing chorded commands show a little banned on the modeline givin hints to prefixes and the associated commands.

#+begin_src elisp
(use-package which-key
  :config (which-key-mode))
#+end_src

** highlight bad whitespace
#+begin_src elisp
(use-package whitespace
  :elpaca nil
  :hook ((prog-mode text-mode) . whitespace-mode)
  :custom (whitespace-style '(face tabs tab-mark trailing))
  (whitespace-display-mappings
   '((tab-mark ?\t [?· ?\t] [?\\ ?\t]))))
#+end_src

** insertting current date
#+begin_src elisp
(defun yeet/insert-date ()
  (interactive)
  (insert (format-time-string "%Y-%m-%d")))
#+end_src

** load full.el
Don't load =full.el= when running on terminal. For example when invoked by the =VISUAL= or =EDITOR= variables by a terminal program (e.g. git or editor).

#+begin_src elisp
(if (or (display-graphic-p) (daemonp))
    (load "full.el"))
#+end_src

* full
:PROPERTIES:
:header-args: :tangle emacs/full.el
:END:
** lexical binding
Always use lexical binding. *ALWAYS*.
#+begin_src elisp
;; -*- lexical-binding: t -*-
#+end_src

** visuals
*** toolbar
Don't show toolbar.

#+begin_src elisp
(tool-bar-mode -1)
#+end_src

*** theme
The type of theme (light or dark) accompanies the day-night cycle (in theory, at least). I want to get the coordinates to be automatic, at some point. Maybe by calling an external [[id:5b304736-46f1-4c24-a62b-d68f98fda37a][nushell]] script or something.

The advice ensures that the color palette is available to the user as global variables of each color.

#+begin_src elisp
(add-to-list 'custom-theme-load-path
       (expand-file-name "themes/" user-emacs-directory))

(use-package autothemer
  :config
  (define-advice autothemer-deftheme
      (:before (_ _ palette &rest _) defcolors)
    (mapcar (lambda (e)
              (setf (symbol-value (car e))
                    (cadr e)))
            (cdr palette))))

(use-package theme-changer
  :after autothemer
  ;; Set for Toledo, PR, BR
  :config (setq calendar-latitude  -24.735140
                calendar-longitude -53.742062)
  (change-theme 'battery-light 'battery-dark))
#+end_src

*** frames
Set the window of graphical frames. Frames should be resized pixel-by-pixel, rather than by character, or whatever Emacs does by default. Set default geometry of a new frame.

#+begin_src elisp
(setq frame-title-format
      '(buffer-line-name "Emacs %b (%f)" "Emacs %b")
      frame-resize-pixelwise t)

(map-put default-frame-alist 'width  40)
(map-put default-frame-alist 'height 22)
#+end_src

*** git status
Show git status of lines on the left side of the windows. Change the default ugly signs to ASCII ones. This should be enabled for all modes derived from src_elisp{`prog-mode'}.

#+begin_src elisp
(use-package git-gutter
  :hook (prog-mode . git-gutter-mode)
  :config
  (setq git-gutter:added-sign "+"
        git-gutter:modified-sign "~"
        git-gutter:deleted-sign "-"
        git-gutter:update-interval 0.02))

(use-package git-gutter-fringe
  :defer t
  :config
  (define-fringe-bitmap 'git-gutter-fr:added    [224] nil nil '(center repeated))
  (define-fringe-bitmap 'git-gutter-fr:modified [224] nil nil '(center repeated))
  (define-fringe-bitmap 'git-gutter-fr:deleted  [128 192 224 240] nil nil 'bottom))
#+end_src

*** modeline
#+begin_src elisp
(defface yeet/mode-line-buffer-name
  `((t :inherit 'default))
  "Background color lightest yellow.")

(defface yeet/mode-line-readable-buffer
  `((t :inherit 'default))
  "Background color lightest yellow.")

(defface yeet/mode-line-writeable-buffer
  `((t :inherit 'default))
  "Background color lightest yellow.")

(defface yeet/mode-line-executable-buffer
  `((t :inherit 'default))
  "Background color lightest yellow.")

(defface yeet/mode-line-shadow
  `((t :inherit 'default))
  "Background color lightest yellow.")

;; include column number in mode-line coordinates
(setq column-number-mode t)

(setq-default mode-line-format
  '((:eval (meow-indicator))
    (:eval
     (if (buffer-modified-p)
       (propertize " %b:%l:%c " 'face 'yeet/mode-line-buffer-name
                   'help-echo (concat "Buffer " (buffer-file-name) " has been modified"))
       (propertize " %b:%l:%c " 'help-echo (concat "Buffer " (buffer-file-name) " has not been modified"))))
    " "
    "<"
    mode-line-mule-info
    (:eval (propertize "r" 'face 'yeet/mode-line-readable-buffer 'help-echo "Buffer is readable"))
    (:eval
     (if buffer-read-only
       (propertize "-" 'help-echo "Buffer is read-only")
       (propertize "w" 'face 'yeet/mode-line-writeable-buffer 'help-echo "Buffer is writeable")))
    (:eval
     (if (and (buffer-file-name) (file-executable-p (buffer-file-name)))
         (propertize "x" 'face 'yeet/mode-line-executable-buffer 'help-echo "Buffer is executable")
       (propertize "-" 'help-echo "Buffer is not executable")))
    ">"
    " "
    "%p/%IB"
    " "
    mode-line-misc-info
    " "
    mode-name
    " "
    (:propertize ("" "(" minor-mode-alist ")") face yeet/mode-line-shadow)))

(use-package hide-mode-line
  :commands hide-mode-line-mode)
#+end_src

*** fonts
I don't know if this is the best way of doing this. I would want to do something more declarative, rather.

#+begin_src elisp
(set-face-attribute 'default nil
 :family "SauceCodePro Nerd Font Mono" :height 100 :inherit 'default)

(set-face-attribute 'fixed-pitch nil
 :family "SauceCodePro Nerd Font Mono" :height 100 :inherit 'default)

(set-face-attribute 'variable-pitch nil
 :family "NotoSans Display Nerd Font" :height 105)

;; set font for character sets from languages of East Asia
(set-fontset-font t 'emoji       "FontAwesome")
(set-fontset-font t 'unicode-bmp "FontAwesome")
(set-fontset-font t 'han      "Noto Sans Mono CJK SC")
(set-fontset-font t 'kana     "Noto Sans Mono CJK JP")
(set-fontset-font t 'hangul   "Noto Sans Mono CJK KR")
(set-fontset-font t 'cjk-misc "Noto Sans Mono CJK KR")
#+end_src

*** line numbers
#+begin_src elisp
(use-package display-line-numbers
  :elpaca nil
  :bind ("C-c t l" . display-line-numbers-mode)
  :hook ((c-mode c++-mode) . display-line-numbers-mode)
  :config (setq-default display-line-numbers-width 2))
#+end_src

*** scrolling
#+begin_src elisp
(setq scroll-step 1
      scroll-preserve-screen-position t
      scroll-margin 3
      scroll-conservatively 101
      scroll-up-aggressively 0.01
      scrolll-down-aggressively 0.01
      hscroll-step 1
      hscroll-margin 1

      ;; reduce cursor lag
      auto-window-vscroll nil)
#+end_src

*** &rest
#+begin_src elisp
(setq prettify-symbols-unprettify-at-point 'right-edge)

(setq mouse-autoselect-window t)
#+end_src

** directory navigation
#+begin_src elisp
(use-package dired
  :elpaca nil
  :hook ((dired-mode . auto-revert-mode)
         (dired-mode . dired-hide-details-mode)))
#+end_src

** better menus
*** mini buffer selection
The =vertico= package replaces the default minibuffer input area with a *vertical list of items* (a grid is also available). In general, this makes it easier to find things.

#+begin_src elisp
(use-package vertico
  :elpaca (vertico
           :protocol https
           :inherit t
           :depth 1
           :host github
           :files (:defaults "extensions/*")
           :repo "minad/vertico")
  :init (vertico-mode)
  :custom
  (vertico-count 5)
  (vertico-preselect 'prompt))
#+end_src

*** better help
The =helpful= package puts *more information* into the =*Help*= buffers, making the more useful.

#+begin_src elisp
(use-package helpful
  :elpaca (helpful
           :type git
           :host github
           :repo "Wilfred/helpful")
  :bind (("C-h f" . helpful-callable)
         ("C-h v" . helpful-variable)
         ("C-h k" . helpful-key)
         ("C-h x" . helpful-command)))
#+end_src

** completions
#+begin_src elisp
(use-package company
  :hook (prog-mode . company-mode)
  :config
  (setq company-selection-wrap-around t
        company-minimum-prefix-length 1
        company-clang-use-compile-flags-txt t))

(use-package orderless
  :config
  (setq completion-styles '(orderless)
        completion-category-defaults nil
        completion-category-overrrides
        '((file (styles partial-completion)))))
#+end_src

** org
#+begin_src elisp
(use-package org
  :bind ("C-c o i" . org-id-get-create)
  :hook ((org-mode . org-indent-mode)
         (org-mode . visual-line-mode))
  :config
  (setq org-directory "~/doc/note"
        org-adapt-indentation nil
        org-src-preserve-indentation t
        ;; create new frame when editting source block
        ; org-src-window-setup 'other-frame
        org-startup-with-inline-images t
        org-indent-indentation-per-level 1
        org-hide-emphasis-markers t
        org-fontify-whole-block-delimiter-line t
        org-startup-folded t))

;; tempo block templates
(use-package org-tempo
  :elpaca nil
  :after org)

;; has additional babel sub-packages
(use-package org-contrib
  :after org)

;; copy link on point
(use-package org-cliplink
  :after org
  :bind ("C-c o l c" . org-cliplink))
#+end_src

*** "/relational"/ note taking
#+begin_src elisp
(use-package org-roam
  :requires org
  :bind (("C-c o r j" . org-roam-dailies-find-today)
         ("C-c o r f" . org-roam-node-find)
         ("C-c o r i" . org-roam-node-insert)
         ("C-c o r w" . yeet/goto-notes-weekly))
  :config
  (defun yeet/goto-notes-weekly ()
    "Opens current week's `org-roam' entry."
    (interactive)
    (org-roam-dailies-find-today "w"))
  :custom
  (org-roam-directory org-directory)
  (org-roam-dailies-directory "journal/")
  (org-roam-file-exclude-regexp '("\\.stfolder" "\\.stignore" "\\.stversions" "data/"))
  (org-roam-capture-templates
   '(("r" "random" plain "%?"
      :target (file+head "random/${slug}.org" "#+title: ${title}\n")
      :unnarrowed t)
     ("p" "persona" plain "%?"
      :target (file+head "persona/${slug}.org" "#+title: ${title}\n#+filetags: :persona:\n")
      :unnarrowed t)
     ("m" "music")
     ("ml" "list" plain "%?"
      :target (file+head "music/list/${slug}.org" "#+title: ${title}\n#+filetags: :music:list:\n")
      :unnarrowed t)
     ("mt" "track" plain "%?"
      :target (file+head "music/track/${slug}.org" "#+title: ${title}\n#+filetags: :music:track:\n")
      :unnarrowed t)
     ("f" "film")
     ("fa" "anime" plain "%?"
      :target (file+head "film/anime/${slug}.org" "#+title: ${title}\n#+filetags: :film:anime:\n")
      :unnarrowed t)
     ("fc" "Cartoon" plain "%?"
      :target (file+head "film/cartoon/${slug}.org" "#+title: ${title}\n#+filetags: :film:cartoon:\n")
      :unnarrowed t)
     ("fm" "movie" plain "%?"
      :target (file+head "film/movie/${slug}.org" "#+title: ${title}\n#+filetags: :film:movie:\n")
      :unnarrowed t)
     ("l" "literature")
     ("lb" "book" plain "%?"
      :target (file+head "literature/book/${slug}.org" "#+title: ${title}\n#+filetags: :literature:book:\n")
      :unnarrowed t)
     ("lm" "manga" plain "%?"
      :target (file+head "literature/manga/${slug}.org" "#+title: ${title}\n#+filetags: :literature:manga:\n")
      :unnarrowed t)))
  (org-roam-dailies-capture-templates
   '(("t" "Daily journal" entry "* %?"
      :target (file+head "%<%d-%m-%Y->.org" "#+title: %<%d-%m-%Y>\n#+filetags: :journal:\n"))
     ("w" "Weekly journal" plain "* %?"
      :target (file+head "%<%Y-W%U>.org" "#+title: %<%U>th week of %<%Y>\n#+filetags: :journal:\n")))))

(use-package org-roam-ui
  :after org-roam
  :commands org-roam-ui-mode
  :custom (org-roam-ui-sync-theme t))
#+end_src

*** source code execution and literate programming
#+begin_src elisp
;; org-babel
(use-package ob
  :elpaca nil
  :after org
  :custom
  (org-babel-load-languages '((emacs-lisp . t) (J . t)))
  (org-confirm-babel-evaluate t))

(use-package ob-J
  :elpaca nil
  :after (ob org-contrib j-mode)
  :custom (org-babel-J-command "jconsole"))

(use-package ob-async :after ob)

;; automatically tangle blocks when saving buffer
(use-package org-auto-tangle
  :disabled
  :after org
  :hook (org-mode . org-auto-tangle-mode))
#+end_src

*** TODO alignment and line wrapping
Have to find a better way to load src_elisp{`org-phscroll'}.

#+begin_src elisp
(use-package olivetti
  :hook (org-mode . olivetti-mode))

(use-package phscroll
  :elpaca (phscroll
           :type git
           :host github
           :repo "misohena/phscroll")
  :config (require 'org-phscroll))
#+end_src

*** latex fragments
#+begin_src elisp
(use-package org-latex
  :no-require
  :elpaca nil
  :after org
  :config
    ;; latex FIXME
  (setq org-startup-with-latex-preview t
        org-latex-inputenc-alist '(("utf8" . "utf8x"))
        org-preview-latex-default-process 'dvisvgm
        org-preview-latex-image-directory (expand-file-name "org-latex/" (xdg-cache-home))
        org-format-latex-options
        (list :foreground 'default
              :background "Transparent"
              :scale 1.2
              :html-foreground "Black"
              :html-background "Transparent"
              :html-scale 1.0
              :matchers '("begin" "$1" "$" "$$" "\\(" "\\[")))
  ;; specify the justification you want
  (plist-put org-format-latex-options :justify 'center)

  (defun org-justify-fragment-overlay (beg end image imagetype)
    "Adjust the justification of a LaTeX fragment.
The justification is set by :justify in
`org-format-latex-options'. Only equations at the beginning of a
line are justified."
    (cond
     ;; Centered justification
     ((and (eq 'center (plist-get org-format-latex-options :justify))
           (= beg (line-beginning-position)))
      (let* ((img (create-image image 'imagemagick t))
             (width (car (image-size img)))
             (offset (floor (- (/ (window-text-width) 2) (/ width 2)))))
        (overlay-put (ov-at) 'before-string (make-string offset ? ))))
     ;; Right justification
     ((and (eq 'right (plist-get org-format-latex-options :justify))
           (= beg (line-beginning-position)))
      (let* ((img (create-image image 'imagemagick t))
             (width (car (image-display-size (overlay-get (ov-at) 'display))))
             (offset (floor (- (window-text-width) width (- (line-end-position) end)))))
        (overlay-put (ov-at) 'before-string (make-string offset ? ))))))

  (defun org-latex-fragment-tooltip (beg end image imagetype)
    "Add the fragment tooltip to the overlay and set click function to toggle it."
    (overlay-put (ov-at) 'help-echo
                 (concat (buffer-substring beg end)
                         "mouse-1 to toggle."))
    (overlay-put (ov-at) 'local-map (let ((map (make-sparse-keymap)))
                                      (define-key map [mouse-1]
                                        `(lambda ()
                                           (interactive)
                                           (org-remove-latex-fragment-image-overlays ,beg ,end)))
                                      map)))

  ;; advise the function to a
  (advice-add 'org--format-latex-make-overlay :after 'org-justify-fragment-overlay)
  (advice-add 'org--format-latex-make-overlay :after 'org-latex-fragment-tooltip))

(use-package math-preview
  :disabled
  :custom
  (math-preview-command "/home/goiabae/var/npm/bin/math-preview")
  (math-preview-scale 1.1))

;; auto generate inline latex images
(use-package org-fragtog
  ; :disabled
  :after org
  :hook (org-mode . org-fragtog-mode))
#+end_src

*** FIXME spell checker
For some reason, it can't detect the =pt_BR= dictionary, which makes this useless for me.

#+begin_src elisp :tangle no
(use-package ispell
  :disabled
  :elpaca nil
  :hook (org-mode . flyspell-mode)
  :config
  ;; csv of dictionaries
  (setq ispell-dictionary
        (c-concat-separated
         '("en_US"
           ; "pt_BR"
           )
         ","))
  (ispell-set-spellchecker-params)
  (ispell-hunspell-add-multi-dic ispell-dictionary))
#+end_src

** eshell
#+begin_src elisp
(use-package esh-mode
  :elpaca nil
  :config (setq eshell-directory-name
                (expand-file-name "emacs/eshell/" (xdg-data-home))))
#+end_src

** highlight comment keywords
Highlight things like TODO, FIXME and NOTE on comments and =org-mode= headings.

#+begin_src elisp
(use-package hl-todo
  :hook (prog-mode . hl-todo-mode)
  :config
  (setq hl-todo-keyword-faces
        '(("TODO"  . success)
          ("FIXME" . error)
          ("NOTE"  . warning)
          ("WARN"  . warning))))
#+end_src

** project management
After having some issues with =eglot= wanting to call a function not in the built-in distribution of package, I've decided to install =project=, instead.

#+begin_src elisp
(use-package project :demand t)
#+end_src

** languages
*** helper functions
#+begin_src elisp
(defun yeet/disable-tabs () (setq indent-tabs-mode nil))
(defun yeet/enable-tabs  () (setq indent-tabs-mode t  ))
#+end_src

*** LSP client
#+begin_src elisp
(use-package eglot
  :after project)
#+end_src

*** LISPs
#+begin_src elisp
(defun yeet/lisp-prettify-symbols ()
  (setq-local prettify-symbols-alist '(("lambda" . ?λ)))
  (prettify-symbols-mode))

(use-package rainbow-delimiters
  :hook ((lisp-data-mode clojure-mode) . rainbow-delimiters-mode))
#+end_src

**** Clojure
#+begin_src elisp
(use-package clojure-mode
  :commands clojure-mode
  :config
  ;; this makes so that clojure code is always indented relative
  ;; to the indentation of the current root and not to the arguments
  ;; of a function
  (setq clojure-indent-style 'always-indent))
#+end_src

**** Emacs Lisp
#+begin_src elisp
(use-package elisp-mode
  :elpaca nil
  :hook ((emacs-lisp-mode . dash-fontify-mode)
         (emacs-lisp-mode . yeet/disable-tabs)
         (emacs-lisp-mode . yeet/lisp-prettify-symbols)))
#+end_src

**** Common LISP
#+begin_src elisp
(use-package lisp-mode
  :elpaca nil
  :hook ((lisp-mode . yeet/disable-tabs)
         (lisp-mode . yeet/lisp-prettify-symbols)))

(use-package sly
  :after lisp-mode
  :commands sly
  :config (setq inferior-lisp-program "/bin/sbcl"))
#+end_src

*** C/C++
#+begin_src elisp
(use-package cc-mode
  :elpaca nil
  :requires eglot
  :hook ((c-mode c++-mode) . eglot-ensure)
  :custom (c-label-minimum-indentation 0)
  :config
  (when (not (locate-file "clangd" exec-path))
    (warn "`clangd' not in `exec-path'. Emacs won't be able to connect to C/C++ LSP server."))
  (add-to-list 'eglot-server-programs '((c-mode c++-mode) . ("clangd" "--enable-config"))))

;; C/C++
(setq compile-command "make"
      compilation-scroll-output t)

(use-package cmake-mode)

(defun yeet/cmake-prepare (generate-compile-commands is-release)
  (interactive
   (list (yes-or-no-p "Should generate compile_commands.json? ")
         (yes-or-no-p "Set build type to Release (otherwise Debug)? ")))
  (let ((default-directory (project-root (project-current t)))
        (compile-command
         (concat "cmake -S . -B build"
                 " -D CMAKE_BUILD_TYPE=" (if is-release "Release" "Debug")
                 (if generate-compile-commands " -D CMAKE_EXPORT_COMPILE_COMMANDS=1" nil))))
    (call-interactively 'compile)))

(defun yeet/cmake-build ()
  (interactive)
  (let ((default-directory (project-root (project-current t)))
        (compile-command "cmake --build build"))
    (call-interactively 'compile)))

(use-package clang-format
  :hook ((c-mode c++-mode) . (lambda () (add-hook 'before-save-hook 'clang-format-buffer nil t)))
  :config
  (setq clang-format-style "file"
        ;; if no `.clang-format' is found, don't do anything
        clang-format-fallback-style "none"))

;; debugger
(use-package realgud
  :bind ("C-c d" . realgud:gdb))

;; disassembler
(use-package rmsbolt
  :commands rmsbolt)

(use-package yasnippet-snippets)
(use-package yasnippet
  :after yasnippet-snippets
  :hook ((c-mode c++-mode) . yas-minor-mode)
  :config (yas-reload-all))
#+end_src

*** J
On Void Linux this is pretty finnicky since the default name of the console executable is =jc= due to conflicts with other packages.

#+begin_src elisp
(use-package j-mode
  :config (setq j-console-cmd "jconsole"))
#+end_src

*** Zig
Zig always indents by 4 spaces. Use =zls= as the language server.

#+begin_src elisp
(use-package zig-mode
  :hook (zig-mode . eglot-ensure)
  :commands zig-mode
  :custom
  (zig-indent-offset 4)
  (zig-format-on-save nil))
#+end_src

*** &rest
#+begin_src elisp
(use-package     bnf-mode :commands bnf-mode)
(use-package     csv-mode :commands csv-mode)
(use-package haskell-mode :commands haskell-mode)
(use-package    yaml-mode :commands yaml-mode)

(use-package tuareg-mode
  :elpaca (tuareg-mode
           :type git
           :host github
           :repo "ocaml/tuareg")
  :commands tuareg-mode)

(use-package web-mode
  :hook
  (web-mode . (lambda ()
                (add-to-list 'electric-pair-pairs '(?\< . ?\>))))
  :commands web-mode)

(use-package js
  :elpaca nil
  :config (setq js-indent-level 2))

(use-package julia-mode
  :commands julia-mode
  :config (setq julia-indent-offset 2))

(use-package lua-mode
  :commands lua-mode
  :config (setq lua-indent-level 2))

(use-package markdown-mode
  :commands markdown-mode
  :mode ("README\\.md\\'" . gfm-mode)
  :init (setq markdown-command "multimarkdown"))

(use-package nix-mode
  :mode "\\.nix\\'"
  :commands nix-mode)

(use-package nushell-mode
  :elpaca (nushell-mode
             :type git
             :host github
             :repo "mrkkrp/emacs-nushell")
  :mode "\\.nu\\'"
  :commands nushell-mode
  :config
  (setq nushell-indent-offset 2))

(use-package prolog
  :elpaca nil
  :commands prolog-mode
  :mode ("\\.pl\\'" . prolog-mode))

(use-package python
  :elpaca nil
  :config (setq python-indent-offset 2))

(use-package rust-mode
  :commands rust-mode
  :config (setq rust-indent-offset 2))

(use-package rustic
  :disabled
  :after rust-mode
  :config (setq rustic-lsp-client nil))
#+end_src

** clipboard
Use the X11 clipboard as the default for things like yanking, killing and pasting.

#+begin_src elisp
(setq-default x-select-enable-clipboard t
              x-select-enable-primary nil)
#+end_src

** pop-ups
Wether or not popups should create new frames instead of splitting windows. May not work with all modes. This is good when using a tiling window manager.

#+begin_src elisp
(setq-default pop-up-frames nil
              pop-up-windows t)
#+end_src

** TODO bell
Variable src_elisp{`visible-bell'} doesn't seem to have any effect. Maybe my theme does not respond well? Will have to test this with Adwaita. The src_elisp{`ring-bell'} function flashes the mode-line in inverted colors.

This is triggered by events such as trying to src_elisp{`delete-backward-char'} on empty modeline buffer.

#+begin_src elisp
(setq visible-bell nil
      ring-bell-function
      #'(lambda ()
          (invert-face 'mode-line)
          (run-with-timer 0.1 nil #'invert-face 'mode-line)))
#+end_src

** apropos
#+begin_src elisp
(setq-default apropos-do-all t)
#+end_src

** disable startup message
Stop Emacs' default startup message from appearing in the src_elisp{`*Messages'} buffer.

#+begin_src elisp
(unless (daemonp)
  (advice-add #'display-startup-echo-area-message :override #'ignore))
#+end_src

** external programs
Open some file types using external programs.

#+begin_src elisp
(use-package openwith
  :custom
  (openwith-associations
   `((,(rx ".pdf") "xdg-open" (file))
     (,(rx ".mp3") "deadbeef" (file))
     (,(rx (or ".mpeg" ".avi" ".wmv" ".mp4" ".mkv")) "mpv" (file))
     (,(rx (or ".jpg" ".jpeg" ".webp" ".gif")) "imv" (file))))
  :init (openwith-mode t))
#+end_src

** email
#+begin_src elisp
(use-package himalaya
  :elpaca (himalaya
             :type git
             :host github
             :repo "dantecatalfamo/himalaya-emacs")
  :commands himalaya
  :bind ("C-c e l" . himalaya))
#+end_src
