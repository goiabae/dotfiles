#+title: Emacs configuration

* battery preamble
#+begin_src elisp :tangle ~/config/emacs/themes/battery.el
;;; battery.el --- Warm and vibrant color scheme for Emacs -*- lexical-binding: t; -*-
;;
;; Copyright (C) 2022 Guilherme Machado
;;
;; Author: Guilherme Machado <https://github.com/goiabae>
;; Maintainer: Guilherme Machado <TODO>
;; Created: fevereiro 02, 2022
;; Version: 0.0.1
;; Keywords: convenience extensions faces files frames outlines
;; Homepage: https://github.com/goiabae/battery-theme
;; Package-Requires: ((autothemer "0.2"))
;;
;; This file is not part of GNU Emacs.
;;
;;; Commentary:

;;  Template for a warm and vibrant color scheme inspired by the famous
;;  Gruvbox, from Vim.

;;; Code:

(require 'autothemer)
(require 'dash)

(defmacro battery-deftheme (name description is-light)
  `(autothemer-deftheme
    ,name
    ,description
    ,(append
      '((((class color)
          (min-colors #xFFFFFF)))

        (neutral0  "#101010")
        (neutral1  "#191919")
        (neutral2  "#262524")
        (neutral3  "#353231")
        (neutral4  "#403c3a")
        (neutral5  "#504845")
        (neutral6  "#635852")
        (neutral7  "#7b6c61")
        (neutral8  "#958172")
        (neutral9  "#a89984")
        (neutral10 "#bdae93")
        (neutral11 "#d2c3a5")
        (neutral12 "#e7d8b3")
        (neutral13 "#f2e4ba")
        (neutral14 "#faedc9")
        (neutral15 "#fef5d8"))

      (let ((symbols
             (mapcar
              (lambda (n)
                (mapcar
                 (lambda (i) (intern (concat n (number-to-string i))))
                 (-iota 16)))
              (list "grey" "neutral"))))
        (-zip-with #'list
                   (car symbols)
                   (if is-light (reverse (cadr symbols)) (cadr symbols))))

      '((bg grey1)
        (fg grey13)

        (darker-red      "#67191b")
        (darker-orange   "#572e1a")
        (darker-yellow   "#423818")
        (darker-olive    "#302f16")
        (darker-green    "#183815")
        (darker-cyan     "#1a2d1e")
        (darker-purple   "#462929")

        (dark-red        "#be241e")
        (dark-orange     "#ac4003")
        (dark-yellow     "#a57109")
        (dark-olive      "#746f06")
        (dark-green      "#24601c")
        (dark-cyan       "#2b5434")
        (dark-purple     "#a63445")

        (red             "#e83437")
        (orange          "#d6580e")
        (yellow          "#d09420")
        (olive           "#98952a")
        (green           "#3f9f32")
        (cyan            "#689e69")
        (purple          "#b16262")

        (light-red       "#fc5356")
        (light-orange    "#fc823c")
        (light-yellow    "#fac240")
        (light-olive     "#b5ba25")
        (light-green     "#5ac04e")
        (light-cyan      "#8ec07c")
        (light-purple    "#ed8585")

        (lighter-red     "#fca39c")
        (lighter-orange  "#fca765")
        (lighter-yellow  "#edd76d")
        (lighter-olive   "#dfe26c")
        (lighter-green   "#a2ea98")
        (lighter-cyan    "#aed8a0")
        (lighter-purple  "#f7b4b4"))

      (let ((colors '(red orange yellow olive green cyan purple))
            (abs-shades '(darker dark light lighter))
            (rel-shades '(lower low high higher)))
        (let ((rel-colors
               (mapcar (lambda (x) (mapcar (lambda (y) (intern (concat (symbol-name x) "-" (symbol-name y)))) colors)) rel-shades))
              (abs-colors
               (mapcar (lambda (x) (mapcar (lambda (y) (intern (concat (symbol-name x) "-" (symbol-name y)))) colors)) abs-shades)))
          (-zip-with #'list
            (-flatten rel-colors)
            (-flatten
              (if is-light (reverse abs-colors) abs-colors))))))

    (
#+end_src

#+begin_src elisp :tangle ~/config/emacs/themes/battery.el
;; Basic faces
(default (:background bg :foreground fg))
(button (:underline t :weight 'bold :foreground yellow))
(cursor (:background fg))
(mode-line (:background neutral10 :foreground neutral2 :box (:line-width 1 :color neutral15 :style 'released-button)))
(mode-line-active (:inherit 'mode-line))
(mode-line-inactive (:inherit 'mode-line))
(fringe (:background bg))
(hl-line (:background grey0))
(region (:background grey5)) ;; selection
(secondary-selection (:background grey6))
(minibuffer-prompt (:background bg :foreground high-green :bold t))
(vertical-border (:foreground grey7))
(internal-border (:background grey7))
(window-divider (:foreground grey8))
(link (:foreground high-yellow :underline t))
(link-visited (:foreground lighter-purple :inherit 'link))
(shadow (:foreground grey8))

(error (:foreground red :bold t))
(success (:foreground high-olive :bold t))
(warning (:foreground high-yellow :bold t))

(alert-low-face (:foreground high-cyan))
(trailing-whitespace (:background red))
(escape-glyph (:foreground cyan))
(header-line (:background grey5 :foreground grey13 :box nil :inherit nil))
(highlight (:background grey4 :foreground fg))
(homoglyph (:foreground yellow))
(match (:foreground grey0 :background cyan))

(bold (:weight 'bold))
(italic (:slant 'italic))
(bold-italic (:weight 'bold :slant 'italic))
(underline (:underline t))

;; Font lock (syntax highlighting)
(font-lock-builtin-face (:foreground high-cyan))
(font-lock-constant-face (:foreground high-purple :bold nil))
(font-lock-comment-face (:foreground grey8))
(font-lock-function-name-face (:foreground high-yellow :bold nil))
(font-lock-keyword-face (:foreground high-red))
(font-lock-string-face (:foreground high-olive))
(font-lock-variable-name-face (:foreground high-yellow))
(font-lock-type-face (:foreground high-orange))
(font-lock-warning-face (:foreground high-red :bold t))
(font-lock-preprocessor-face (:foreground high-cyan))
(font-lock-negation-char-face (:foreground high-red))
(font-lock-comment-delimiter-face (:inherit 'font-lock-comment-face))
(font-lock-doc-face (:inherit 'font-lock-string-face))
(font-lock-doc-markup-face (:inherit 'font-lock-constant-face))
(font-lock-regexp-grouping-backslash (:inherit 'bold))
(font-lock-regexp-grouping-construct (:inherit 'bold))
(font-lock-misc-punctuation-face (:inherit 'font-lock-punctuation-face))
(font-lock-delimiter-face (:inherit 'font-lock-punctuation-face))
(font-lock-bracket-face (:inherit 'font-lock-punctuation-face))
(font-lock-punctuation-face nil)
(font-lock-property-use-face (:inherit 'font-lock-property-name-face))
(font-lock-property-name-face (:inherit 'font-lock-variable-name-face))
(font-lock-operator-face (:inherit 'font-lock-builtin-face))
(font-lock-number-face (:inherit 'font-lock-constant-face))
(font-lock-escape-face (:inherit 'font-lock-regexp-grouping-backslash))
(font-lock-regexp-face (:inherit 'font-lock-string-face))
(font-lock-variable-use-face (:inherit 'font-lock-variable-name-face))
(font-lock-function-call-face (:inherit 'font-lock-function-name-face))

;; tree-sitter
(treesit-explorer-field-name nil)
(treesit-explorer-anonymous-node (:inherit 'shadow))

;; jupyter-repl
(jupyter-repl-input-prompt (:foreground olive))
(jupyter-repl-output-prompt (:foreground red))

;; dashboard
(dashboard-items-face (:foreground grey13))
(dashboard-main-button (:foreground grey13 :bold t))

;; hi-lock
(hi-yellow (:foreground bg :background lighter-olive))
(hi-pink (:foreground bg :background lighter-purple))
(hi-green (:foreground bg :background lighter-green))
(hi-blue (:foreground bg :background neutral15))
(hi-salmon (:foreground bg :background lighter-orange))
(hi-aquamarine (:foreground bg :background lighter-green))
(hi-black-b (:weight 'bold))
(hi-blue-b (:weight 'bold :foreground neutral4))
(hi-green-b (:weight 'bold :foreground light-green))
(hi-red-b (:weight 'bold :foreground red))
(hi-black-hb (:height 1.67 :weight 'bold :inherit 'variable-pitch))

;; lsp
(lsp-face-highlight-textual (:background grey6))
(lsp-face-highlight-read (:background grey6))
(lsp-face-highlight-write (:background grey6))
(lsp-face-semhl-constant (:foreground cyan))
(lsp-face-semhl-deprecated (:foreground cyan))
(lsp-face-semhl-enummember (:foreground cyan))
(lsp-face-semhl-field (:foreground cyan))
(lsp-face-semhl-field-static (:foreground cyan))
(lsp-face-semhl-function (:foreground cyan))
(lsp-face-semhl-method (:foreground cyan))
(lsp-face-semhl-namespace (:foreground cyan))
(lsp-face-semhl-preprocessor (:foreground cyan))
(lsp-face-semhl-static-method (:foreground cyan))
(lsp-face-semhl-type-class (:foreground cyan))
(lsp-face-semhl-type-enum (:foreground cyan))
(lsp-face-semhl-type-primitive (:foreground cyan))
(lsp-face-semhl-type-template (:foreground cyan))
(lsp-face-semhl-type-typedef (:foreground cyan))
(lsp-face-semhl-variable (:foreground cyan))
(lsp-face-semhl-variable-local (:foreground cyan))
(lsp-face-semhl-variable-parameter (:foreground cyan))
(lsp-lens-face (:foreground cyan))
(lsp-lens-mouse-face (:foreground cyan))
(lsp-ui-doc-background (:foreground cyan))
(lsp-ui-doc-header (:foreground cyan))
(lsp-ui-doc-url (:foreground cyan))
(lsp-ui-peek-filename (:foreground cyan))
(lsp-ui-peek-footer (:foreground cyan))
(lsp-ui-peek-header (:foreground cyan))
(lsp-ui-peek-highlight (:foreground cyan))
(lsp-ui-peek-line-number (:foreground cyan))
(lsp-ui-peek-list (:foreground cyan))
(lsp-ui-peek-peek (:foreground cyan))
(lsp-ui-peek-selection (:foreground cyan))
(lsp-ui-sideline-code-action (:foreground cyan))
(lsp-ui-sideline-current-symbol (:foreground cyan))
(lsp-ui-sideline-symbol (:foreground cyan))
(lsp-ui-sideline-symbol-info (:foreground cyan))

;; flymake
(flymake-end-of-line-diagnostics-face (:height 0.85 :box (:line-width -1)))

(flymake-error (:underline (:style 'wave :color high-red)))
(flymake-error-echo (:inherit 'compilation-error))
(flymake-error-echo-at-eol (:inherit ('flymake-end-of-line-diagnostics-face 'compilation-error)))

(flymake-warning (:underline (:style 'wave :color high-cyan)))
(flymake-warning-echo (:inherit 'compilation-warning))
(flymake-warning-echo-at-eol (:inherit ('flymake-end-of-line-diagnostics-face 'compilation-warning)))

(flymake-note (:underline (:style 'wave :color high-olive)))
(flymake-note-echo (:inherit 'flymake-note))
(flymake-note-echo-at-eol (:inherit ('flymake-end-of-line-diagnostics-face 'flymake-note)))

;; flyspell
(flyspell-incorrect (:underline (:style 'wave :color red)))
#+end_src

#+begin_src elisp :tangle ~/config/emacs/themes/battery.el
;; diff
(diff-header (:extend t :background grey3))
(diff-hunk-header (:inherit 'diff-header))
(diff-file-header (:weight 'bold :extend t :background grey4))
(diff-changed nil)
(diff-removed (:extend t :background lower-red   :inherit 'diff-changed))
(diff-added (:extend t :background lower-green :inherit 'diff-changed))
(diff-refine-changed nil)
(diff-refine-removed (:background low-red   :inherit 'diff-refine-changed))
(diff-refine-added (:background low-green :inherit 'diff-refine-changed))

(diff-index (:inherit 'diff-file-header))
(diff-changed-unspecified (:extend t :background neutral3 :inherit 'diff-changed))
(diff-indicator-removed (:foreground dark-red :inherit 'diff-removed))
(diff-indicator-added (:foreground green :inherit 'diff-added))
(diff-indicator-changed (:foreground light-olive :inherit 'diff-changed))
(diff-function (:inherit 'diff-header))
(diff-context (:extend t))
(diff-nonexistent (:inherit 'diff-file-header))
(diff-error (:weight 'bold :foreground red :background bg))

;; mini-modeline
(mini-modeline-mode-line (:background low-olive :height 0.14 :box nil))

;; isearch
(isearch (:foreground grey13 :background lower-purple))
(isearch-fail (:foreground grey13 :background lower-red))
(isearch-group-1 (:foreground high-red :background low-purple))
(isearch-group-2 (:foreground high-red :background low-purple))
(lazy-highlight (:background grey4))

(query-replace (:inherit 'isearch))
#+end_src

#+begin_src elisp :tangle ~/config/emacs/themes/battery.el
(debugger-running (:weight 'bold :foreground high-green))
(debugger-not-running (:inherit 'font-lock-warning-face))

;; ansi-color
(ansi-color-black (:foreground bg :background bg))
(ansi-color-red (:foreground red    :background red))
(ansi-color-green (:foreground olive  :background olive))
(ansi-color-yellow (:foreground yellow :background yellow))
(ansi-color-blue (:foreground orange :background orange))
(ansi-color-magenta (:foreground purple :background purple))
(ansi-color-cyan (:foreground cyan   :background cyan))
(ansi-color-white (:foreground neutral15 :background neutral15))

(ansi-color-bright-black (:foreground grey10 :background neutral5))
(ansi-color-bright-red (:foreground light-red    :background light-red))
(ansi-color-bright-green (:foreground light-olive  :background light-olive))
(ansi-color-bright-yellow (:foreground light-yellow :background light-yellow))
(ansi-color-bright-blue (:foreground light-orange :background light-orange))
(ansi-color-bright-magenta (:foreground light-purple :background light-purple))
(ansi-color-bright-cyan (:foreground light-cyan   :background light-cyan))
(ansi-color-bright-white (:foreground neutral15 :background neutral15))

(ansi-color-bold (:inherit ('quote 'bold)))
(ansi-color-faint (:weight 'light))
(ansi-color-italic (:inherit ('quote 'italic)))
(ansi-color-underline (:inherit ('quote 'underline)))
(ansi-color-slow-blink (:box (:line-width -1)))
(ansi-color-fast-blink (:box (:line-width -1)))
(ansi-color-inverse (:inverse-video t))

;; message
(message-header-other (:foreground orange))
(message-header-to (:weight 'bold :foreground fg))
(message-header-subject (:foreground fg))
(message-header-name (:foreground light-yellow))

;; sh
(sh-heredoc (:foreground high-olive))
(sh-quoted-exec (:foreground high-purple))
(sh-escaped-newline (:inherit 'font-lock-string-face))
#+end_src

* early init
:PROPERTIES:
:header-args: :tangle emacs/early-init.el :lexical t
:END:
** lexical binding
Always use lexical binding. *ALWAYS*.
#+begin_src elisp
;; -*- lexical-binding: t -*-
#+end_src

** =package.el=
Disable usage of =package.el=.

#+begin_src elisp
(setq package-enable-at-startup nil
      package-archives nil)
#+end_src

#+begin_src elisp :tangle ~/config/emacs/themes/battery.el
(package-status-avail-obso (:inherit 'package-status-incompat))
(package-status-incompat (:inherit 'error))
(package-status-unsigned (:inherit 'font-lock-warning-face))
(package-status-dependency (:inherit 'package-status-installed))
(package-status-from-source (:inherit 'font-lock-negation-char-face))
(package-status-installed (:inherit 'font-lock-comment-face))
(package-status-disabled (:inherit 'font-lock-warning-face))
(package-status-held (:inherit 'font-lock-constant-face))
(package-status-new (:inherit ('bold 'package-status-available)))
(package-status-available (:inherit 'default))
(package-status-external (:inherit 'package-status-built-in))
(package-status-built-in (:inherit 'font-lock-builtin-face))
(package-description (:inherit 'default))
(package-name (:inherit 'link))
(package-help-section-name (:inherit ('bold 'font-lock-function-name-face)))
#+end_src

** garbage collector
Pratically disable the garbage collector during initialization. When fully initialized, revert back.

#+begin_src elisp
(let ((tresh gc-cons-threshold)
      (percent gc-cons-percentage))
  (setq gc-cons-threshold most-positive-fixnum
        gc-cons-percentage 0.6)
  (add-hook 'emacs-startup-hook
    (lambda ()
      (setq gc-cons-threshold tresh
            gc-cons-percentage percent))))
#+end_src

** =default.el= and =site-start.el=
Disable loading those files.

#+begin_src elisp
(setq site-run-file nil
      inhibit-default-init t)
#+end_src

** splash screen
Disable displaying splash screen on start.

#+begin_src elisp
(setq inhibit-startup-screen t
      inhibit-startup-buffer-menu t)
#+end_src

** automatic resize
Disable automatic resize without any confirmation.

#+begin_src elisp
(setq frame-inhibit-implied-resize t)
#+end_src

* init
:PROPERTIES:
:header-args: :tangle emacs/init.el :lexical t
:END:
** lexical binding
Always use lexical binding. *ALWAYS*. Use the XDG Base Directory spec and include some handy utilities to work on =alist.=
#+begin_src elisp
;; -*- lexical-binding: t -*-

(require 'xdg)
(require 'map)
#+end_src

** function aliases
#+begin_src elisp
(defalias 'head 'car)
(defalias 'tail 'cdr)
#+end_src

** compilation
*** "native"
Set native compilation cache path to xdg cache. Also, don't compile when the editor is running, which could cause freezes. Only works after 29.0 and when native-comp is activated on the distribution. I believe Void Linux disables it by default.
#+begin_src elisp
(when (fboundp 'native-compile-async)
  (setq native-comp-deferred-compilation nil
        comp-deferred-compilation nil)
  (push
   (expand-file-name "emacs/native-lisp" (xdg-cache-home))
   native-comp-eln-load-path))
#+end_src

*** bytecode
Disable some byte compiler warnings. A lot of old packages just piss of the compiler. Maybe there's a more considerate way of doing this.
#+begin_src elisp
(setq warning-suppress-types '((comp))
      byte-compile-warnings
      '(not obsolete interactive-only lexical docstrings)
      load-prefer-newer t)
#+end_src

** startup statistics
Display a message after initialization showing startup time and garbage collections.
#+begin_src elisp
(add-hook 'emacs-startup-hook
    (lambda ()
      (message "Emacs loaded in %s with %d garbage collections."
         (format "%.2f seconds"
           (float-time
            (time-subtract after-init-time before-init-time)))
         gcs-done)))
#+end_src

** standard directories
Add some directories to better integrate with the system. Prevent packages from littering =user-emacs-directory= and any other directories.

#+begin_src elisp
(setq user-emacs-directory (expand-file-name "emacs" (xdg-config-home)))

(push user-emacs-directory load-path)
(push (expand-file-name "~/lib/elisp") load-path)

(setq temporary-file-directory
      (expand-file-name "emacs/" (xdg-runtime-dir)))

(unless (file-exists-p temporary-file-directory)
  (make-directory temporary-file-directory))
#+end_src

** package manager
*** elpaca
#+begin_src elisp
(defvar elpaca-installer-version 0.5)

(defvar elpaca-directory (expand-file-name "emacs/elpaca/" (xdg-data-home)))
(defvar elpaca-builds-directory (expand-file-name "builds/" elpaca-directory))
(defvar elpaca-repos-directory (expand-file-name "repos/" elpaca-directory))

(defvar elpaca-order '(elpaca :repo "https://github.com/progfolio/elpaca.git"
                              :ref nil
                              :files (:defaults (:exclude "extensions"))
                              :build (:not elpaca--activate-package)))

(let* ((repo  (expand-file-name "elpaca/" elpaca-repos-directory))
       (build (expand-file-name "elpaca/" elpaca-builds-directory))
       (order (cdr elpaca-order))
       (default-directory repo))
  (add-to-list 'load-path (if (file-exists-p build) build repo))
  ;; clone elpaca and byte-compile it
  (unless (file-exists-p repo)
    (make-directory repo t)
    (when (< emacs-major-version 28) (require 'subr-x))
    (condition-case-unless-debug err
        (if-let ((buffer (pop-to-buffer-same-window "*elpaca-bootstrap*"))
                 ((zerop (call-process "git" nil buffer t "clone"
                                       (plist-get order :repo) repo)))
                 ((zerop (call-process "git" nil buffer t "checkout"
                                       (or (plist-get order :ref) "--"))))
                 (emacs (concat invocation-directory invocation-name))
                 ((zerop (call-process emacs nil buffer nil "-Q" "-L" "." "--batch"
                                       "--eval" "(byte-recompile-directory \".\" 0 'force)")))
                 ((require 'elpaca))
                 ((elpaca-generate-autoloads "elpaca" repo)))
            (progn (message "%s" (buffer-string)) (kill-buffer buffer))
          (error "%s" (with-current-buffer buffer (buffer-string))))
      ((error) (warn "%s" err) (delete-directory repo 'recursive))))
  (unless (require 'elpaca-autoloads nil t)
    (require 'elpaca)
    (elpaca-generate-autoloads "elpaca" repo)
    (load "./elpaca-autoloads")))
#+end_src

The reason why src_elisp{`elpaca-order'} is weirdly passed by splicing inside backquotes (that's really stupid) is because the first element of the order is used inside the src_elisp{`elpaca'} macro to make a new symbol at /compile time/, so you need to expand src_elisp{`elpaca-order'} before src_elisp{`elpaca'} gets called/executed. I don't like this at all.

#+begin_src elisp
(add-hook 'after-init-hook #'elpaca-process-queues)
(elpaca `(,@elpaca-order))

(elpaca elpaca-use-package
  (elpaca-use-package-mode)
  (setq elpaca-use-package-by-default t))

(elpaca-wait)
#+end_src

#+begin_src elisp :tangle ~/config/emacs/themes/battery.el
(elpaca-finished (:weight 'bold :foreground green))
(elpaca-busy     (:weight 'bold :foreground yellow))
(elpaca-blocked  (:weight 'bold :foreground purple))
(elpaca-failed   (:weight 'bold :foreground red))

(elpaca-ui-marked-delete  (:weight 'bold :foreground red))
(elpaca-ui-marked-install (:weight 'bold :foreground neutral4))
(elpaca-ui-marked-rebuild (:weight 'bold :foreground dark-purple))
(elpaca-ui-marked-fetch   (:weight 'bold :foreground dark-red))
(elpaca-ui-marked-update  (:weight 'bold :foreground light-orange))

(elpaca-log-highlight (:inherit 'warning))
(elpaca-log-error     (:inherit 'error))
(elpaca-log-info      (:inherit 'shadow))

(elpaca-info-section (:weight 'bold))
(elpaca-info-package (:height 2.0))
#+end_src

** littering
#+begin_src elisp
(use-package no-littering
  :custom
  (no-littering-etc-directory (expand-file-name "etc/" user-emacs-directory))
  (no-littering-var-directory (expand-file-name "emacs/" (xdg-data-home))))
#+end_src

** text encoding
#+begin_src elisp
(when (eq system-type 'windows-nt)
  (setq locale-coding-system 'utf-8))

(use-package mule
  :elpaca nil
  :config
  (prefer-coding-system          'utf-8)
  (set-default-coding-systems    'utf-8-unix)
  (set-selection-coding-system   'utf-8-unix)
  (set-buffer-file-coding-system 'utf-8-unix)
  (set-terminal-coding-system    'utf-8)
  (set-keyboard-coding-system    'utf-8)
  (set-file-name-coding-system   'utf-8)
  (set-clipboard-coding-system   'utf-8)
  (set-language-environment "UTF-8"))
#+end_src

** modal editting
#+begin_src elisp
(defun meow-setup ()
    (setq meow-cheatsheet-layout meow-cheatsheet-layout-qwerty)
    (meow-motion-overwrite-define-key
     '("h" . meow-left)
     '("j" . meow-next)
     '("k" . meow-prev)
     '("l" . meow-right)
     '("<escape>" . ignore))
    (meow-leader-define-key
     '("h" . "C-h")
     '("/" . meow-keypad-describe-key)
     '("?" . meow-cheatsheet))
    (meow-normal-define-key
     '("1" . meow-expand-1)
     '("2" . meow-expand-2)
     '("3" . meow-expand-3)
     '("4" . meow-expand-4)
     '("5" . meow-expand-5)
     '("6" . meow-expand-6)
     '("7" . meow-expand-7)
     '("8" . meow-expand-8)
     '("9" . meow-expand-9)
     '("0" . meow-expand-0)
     '("-" . negative-argument)
     '("=" . undefined)
     ; TODO <backspace>

     '("!" . undefined)
     '("@" . undefined)
     '("#" . undefined)
     '("$" . undefined)
     '("%" . query-replace)
     '("^" . undefined)
     '("&" . undefined)
     '("*" . meow-universal-argument)
     '("(" . backward-list)
     '(")" . forward-list)
     '("_" . undefined)
     '("+" . undefined)

     ; TODO <tab>
     '("q" . meow-quit)
     '("w" . meow-mark-word)
     '("e" . meow-next-word)
     '("r" . meow-replace)
     '("t" . meow-till)
     '("y" . meow-save) ; this really is meow-yank
     '("u" . meow-undo)
     '("i" . meow-insert)
     '("o" . meow-open-below)
     '("p" . meow-yank)
     '("[" . meow-beginning-of-thing)
     '("]" . meow-end-of-thing)
     '("\\" . undefined)

     ; TODO S-TAB
     '("Q" . undefined)
     '("W" . meow-mark-symbol)
     '("E" . move-end-of-line)
     '("R" . meow-swap-grab)
     '("T" . undefined)
     '("Y" . meow-sync-grab)
     '("U" . meow-undo-in-selection)
     '("I" . meow-open-above)
     '("O" . meow-to-block)
     '("P" . undefined)
     '("{" . undefined)
     '("}" . undefined)
     '("|" . undefined)

     '("<escape>" . ignore)
     '("a" . meow-append)
     '("s" . meow-kill)
     '("d" . meow-delete)
     '("f" . meow-find)
     '("g" . meow-cancel-selection)
     '("h" . meow-left)
     '("i" . meow-insert)
     '("j" . meow-next)
     '("k" . meow-prev)
     '("l" . meow-right)
     '(";" . meow-reverse)
     '("'" . repeat)
     ; TODO <return>

     '("A" . move-beginning-of-line)
     '("S" . undefined)
     '("D" . meow-backward-delete)
     '("F" . undefined)
     '("G" . meow-grab)
     '("H" . meow-left-expand)
     '("I" . undefined)
     '("J" . meow-next-expand)
     '("K" . meow-prev-expand)
     '("L" . meow-right-expand)
     '(":" . meow-goto-line)
     '("\"" . undefined)

     '("z" . meow-pop-selection)
     '("x" . undefined)
     '("c" . meow-change)
     '("v" . meow-visit)
     '("b" . meow-back-word)
     '("n" . meow-search)
     '("m" . meow-join)
     '("," . meow-inner-of-thing)
     '("." . meow-bounds-of-thing)
     '("/" . isearch-forward-regexp)

     '("Z" . undefined)
     '("X" . meow-goto-line)
     '("C" . meow-block)
     '("V" . meow-line)
     '("B" . meow-back-symbol)
     '("N" . undefined)
     '("M" . undefined)
     '("<" . undefined)
     '(">" . undefined)
     '("?" . isearch-backward-regexp)
     ))

(use-package meow
  :config
  (meow-setup)
  (setq meow-use-clipboard t
        meow-visit-sanitize-completion nil)
  (meow-global-mode 1)
  (setq-default meow-cursor-type-insert 'box
                meow-cursor-type-beacon 'box
                meow-cursor-type-normal 'box
                meow-cursor-type-keypad 'box
                meow-cursor-type-motion 'box
                meow-cursor-type-default 'box
                meow-cursor-type-region-cursor 'box
                )
  (add-to-list 'meow-mode-state-list '(comint-mode . normal)))
#+end_src

#+begin_src elisp :tangle ~/config/emacs/themes/battery.el
(meow-normal-indicator (:foreground darker-olive))
(meow-insert-indicator (:foreground darker-red))
(meow-beacon-indicator (:foreground darker-cyan))
(meow-keypad-indicator (:foreground darker-purple))
(meow-motion-indicator (:foreground darker-green))
(meow-search-indicator (:foreground darker-yellow))

(meow-normal-cursor (:background high-orange))
(meow-insert-cursor (:background high-yellow))
(meow-beacon-cursor (:background high-cyan))
(meow-keypad-cursor (:background high-red))
(meow-motion-cursor (:background high-green))

(meow-beacon-fake-cursor (:extend nil :foreground bg :background purple :inherit 'region))
(meow-unknown-cursor     (:inherit 'cursor))
(meow-kmacro-cursor      (:underline t))

(meow-region-cursor-1 (:foreground neutral12 :background olive))
(meow-region-cursor-2 (:foreground neutral12 :background neutral8))
(meow-region-cursor-3 (:foreground neutral12 :background grey9))

(meow-keypad-cannot-display (:height 0.7 :foreground neutral15))
(meow-beacon-fake-selection (:foreground bg :background grey10 :inherit 'region))
(meow-search-highlight      (:inherit 'lazy-highlight))

(meow-position-highlight-number   (:foreground bg :inherit 'default))
(meow-position-highlight-number-1 (:background purple :inherit 'meow-position-highlight-number))
(meow-position-highlight-number-2 (:background grey9 :inherit 'meow-position-highlight-number))
(meow-position-highlight-number-3 (:background grey10 :inherit 'meow-position-highlight-number))

(meow-position-highlight-reverse-number-1 (:inherit 'meow-position-highlight-number-1))
(meow-position-highlight-reverse-number-2 (:inherit 'meow-position-highlight-number-2))
(meow-position-highlight-reverse-number-3 (:inherit 'meow-position-highlight-number-3))

(meow-cheatsheet-command   (:height 90 :inherit 'fixed-pitch))
(meow-cheatsheet-highlight (:foreground neutral15 :inherit 'meow-cheatsheet-command))
#+end_src

** better defaults?
*** auto save
#+begin_src elisp
(setq delete-auto-save-files t
      auto-save-list-file-prefix
      (expand-file-name "auto-save" temporary-file-directory)
      auto-save-default nil
      auto-save-file-name-transforms
       `((".*" ,temporary-file-directory t)))

(auto-save-mode -1)
#+end_src

*** lock files
#+begin_src elisp
(setq create-lockfiles nil)
#+end_src

*** backup files
#+begin_src elisp
(setq backup-directory-alist
      `(("." . ,(expand-file-name "backup" temporary-file-directory))
        (,tramp-file-name-regexp . nil))
      make-backup-files t)
#+end_src

*** =custom.el=
Keep custom from writting to src_elisp{`user-init-file'}.

#+begin_src elisp
(setq custom-file (expand-file-name "custom.el" user-emacs-directory))

(when (file-exists-p custom-file)
  (load custom-file 'noerror))
#+end_src

#+begin_src elisp :tangle ~/config/emacs/themes/battery.el
(custom-invalid  (:foreground lighter-olive :background red))
(custom-rogue    (:foreground lighter-purple :background neutral0))
(custom-modified (:foreground neutral15 :background neutral4))
(custom-set      (:foreground neutral4 :background neutral15))
(custom-changed  (:foreground neutral15 :background neutral4))
(custom-themed   (:foreground neutral15 :background neutral4))
(custom-saved    (:underline t))

(custom-button                  (:box (:line-width 2 :style 'released-button) :foreground neutral0 :background neutral11))
(custom-button-mouse            (:box (:line-width 2 :style 'released-button) :foreground neutral0 :background neutral15))
(custom-button-unraised         (:inherit 'underline))
(custom-button-pressed          (:box (:line-width 2 :style 'pressed-button) :foreground neutral0 :background neutral11))
(custom-button-pressed-unraised (:foreground dark-purple :inherit 'custom-button-unraised))

(custom-documentation nil)
(custom-state (:foreground dark-green))
(custom-link (:inherit 'link))
(custom-comment (:background neutral15))
(custom-comment-tag (:foreground neutral1))
(custom-visibility (:height 0.8 :inherit 'link))
(custom-face-tag (:inherit 'custom-variable-tag))

(custom-variable-obsolete (:foreground neutral4))
(custom-variable-tag      (:weight 'bold :foreground neutral4))
(custom-variable-button   (:weight 'bold :underline t))

(custom-group-tag-1    (:height 1.2 :weight 'bold :foreground red :inherit 'variable-pitch))
(custom-group-tag      (:height 1.2 :weight 'bold :foreground neutral4 :inherit 'variable-pitch))
(custom-group-subtitle (:weight 'bold))
#+end_src

*** interactive
Always confirm before killing an external process. Use short answers for boolean interactive forms. "y" or "n", instead of "yes" or "no".

#+begin_src elisp
(setq confirm-kill-processes t)

(if (version< emacs-version "28.1")
    (defalias 'yes-or-no-p 'y-or-n-p)
  (setq use-short-answers t))
#+end_src

*** remembering point
It makes no sense to record the POINT of last access to a file if you can't even read it. Just disable it.

#+begin_src elisp
(setq-default save-place-forget-unreadable-files t)
#+end_src

*** scratch buffer
Don't append anything at the beggining of the scratch buffer on creation. By default a comment is inserted explaining the behaviour of src_elisp{`lisp-interaction-mode'}.

#+begin_src elisp
(setq initial-scratch-message nil)
#+end_src

*** whitespace
Don't add newlines when scrolling to bottom. Put a newline at the end of all files. Remove useless whitespace on save.

#+begin_src elisp
(setq next-line-add-newlines nil
      require-final-newline t)

(add-hook 'before-save-hook 'delete-trailing-whitespace)
#+end_src

*** filesystem operations
Instead of deleting nodes, move them to trash.

#+begin_src elisp
(setq-default delete-by-moving-to-trash t)
#+end_src

*** message buffer
On a long running session, such as using the daemon and only suspending the machine, the src_elisp{`*Messages*'} buffer could get quite large. Let's prevent this by truncating the buffer when it gets to a certain line count.

#+begin_src elisp
(setq-default message-log-max 1000)
#+end_src

** key bindings
This assumes that this version of Emacs has the `bind-key' included in the default distribution.

#+begin_src elisp
(require 'bind-key)

(bind-keys
 ("C--"       . text-scale-decrease)
 ("C-="       . text-scale-increase)
 ("C-c ,"     . switch-to-buffer)
 ("C-c ."     . find-file)
 ("C-c b i"   . ibuffer)
 ("C-c c"     . compile)
 ("C-c f d"   . delete-frame)
 ("C-c f m"   . make-frame)
 ("C-c i d"   . yeet/insert-date)
 ("C-c p i"   . elpaca-info)
 ("C-c p m"   . elpaca-manager)
 ("C-c p r"   . elpaca-recipe)
 ("C-c p u"   . elpaca-try)
 ("C-c p v"   . elpaca-visit)
 ("C-c q"     . comment-or-uncomment-region)
 ("C-c s"     . async-shell-command)
 ("C-c t t"   . toggle-truncate-lines)
 ("C-c w d"   . delete-window)
 ("C-c w h"   . windmove-left)
 ("C-c w j"   . windmove-down)
 ("C-c w k"   . windmove-up)
 ("C-c w l"   . windmove-right)
 ("C-c w s b" . split-window-below)
 ("C-c w s r" . split-window-right)
 ("C-h F"     . describe-face)
 ("DEL" . backward-delete-char)
)
#+end_src

By default, Emacs kills the word with =C-<backspace>=, which copies to clipboard. This behaviour is really annoying when trying to change file or buffer with something already  on the clipboard.

#+begin_src elisp
(defun yeet/backward-delete-word (arg)
  "Delete characters backward until encountering the beginning of a word.
Do this ARG times."
  (interactive "p")
  (delete-region (point) (progn (backward-word arg) (point))))

(bind-key "C-<backspace>" #'yeet/backward-delete-word 'minibuffer-local-map)
#+end_src

** formatting and navigation
Stop =electric= from indent things automatically. Highlight matching pairs of characters. Use tabs for indentation with 2 characters wide =TAB=.

#+begin_src elisp
(use-package electric
  :elpaca nil
  :custom (electric-indent-inhibit t)
  ;; disable auto-identation
  :config (electric-indent-mode nil))

(use-package elec-pair
  :elpaca nil
  :after electric
  :custom (electric-pair-skip-self t)
          (electric-pair-pairs
           '((?\{ . ?\})
             (?\( . ?\))
             (?\[ . ?\])))
  ;; TODO refactor to use hooks instead
  :config (electric-pair-mode t))

(show-paren-mode 1)

(setq-default tab-width 2
              indent-tabs-mode t
              fill-column 70
              truncate-lines nil)
#+end_src

** visuals
When running on a non-graphic display (terminal, for example), by default Emacs does some trickery to make the cursor stand out. Disable that.

#+begin_src elisp
(blink-cursor-mode -1)
(setq visible-cursor nil)
#+end_src

** case conversions
#+begin_src elisp
;; don't ask for confirmation when changing region case
(put 'downcase-region 'disabled nil)
(put 'upcase-region   'disabled nil)

(use-package titlecase
  :commands titlecase-region)
#+end_src

** keyboard shortcut hints
When pressing chorded commands show a little banned on the modeline givin hints to prefixes and the associated commands.

#+begin_src elisp
(use-package which-key
  :config (which-key-mode))
#+end_src

#+begin_src elisp :tangle ~/config/emacs/themes/battery.el
(which-key-key-face                   (:inherit 'font-lock-constant-face))
(which-key-separator-face             (:inherit 'font-lock-comment-face))
(which-key-note-face                  (:inherit 'which-key-separator-face))
(which-key-command-description-face   (:inherit 'font-lock-function-name-face))
(which-key-local-map-description-face (:inherit 'which-key-command-description-face))
(which-key-highlighted-command-face   (:underline t :inherit 'which-key-command-description-face))
(which-key-group-description-face     (:inherit 'font-lock-keyword-face))
(which-key-special-key-face           (:weight 'bold :inverse-video t :inherit 'which-key-key-face))
(which-key-docstring-face             (:inherit 'which-key-note-face))
#+end_src

** highlight bad whitespace
#+begin_src elisp
(use-package whitespace
  :elpaca nil
  :hook ((prog-mode text-mode) . whitespace-mode)
  :custom (whitespace-style '(face tabs tab-mark trailing))
  (whitespace-display-mappings
   '((tab-mark ?\t [?· ?\t] [?\\ ?\t]))))
#+end_src

#+begin_src elisp :tangle ~/config/emacs/themes/battery.el
(whitespace-tab             (:background bg :foreground grey6))
(whitespace-space           (:background bg :foreground grey6))
(whitespace-hspace          (:background bg :foreground grey6))
(whitespace-newline         (:background bg :foreground grey6))
(whitespace-line            (:background bg :foreground grey6))
(whitespace-empty           (:background bg :foreground grey6))
(whitespace-indentation     (:background bg :foreground grey6))
(whitespace-big-indent      (:background bg :foreground grey6))
(whitespace-space-after-tab (:background bg :foreground grey6))

(whitespace-space-before-tab       (:background high-red))
(whitespace-missing-newline-at-eof (:background high-red))
(whitespace-trailing               (:background high-red))
#+end_src

** insertting current date
#+begin_src elisp
(defun yeet/insert-date ()
  (interactive)
  (insert (format-time-string "%Y-%m-%d")))
#+end_src

** nicer fs path and string utility functions
#+begin_src elisp
(use-package f
  :elpaca (f
           :protocol https
           :inherit t
           :depth 1
           :host github
           :repo "rejeep/f.el"))

(use-package s
  :elpaca (s
           :protocol https
           :inherit t
           :depth 1
           :host github
           :repo "magnars/s.el"))
#+end_src

** load full.el
Don't load =full.el= when running on terminal. For example when invoked by the =VISUAL= or =EDITOR= variables by a terminal program (e.g. git or editor).

#+begin_src elisp
(when (or (display-graphic-p) (daemonp))
    (require 'full))
#+end_src

** post amble
#+begin_src elisp
(provide 'init)
#+end_src

* full
:PROPERTIES:
:header-args: :tangle emacs/full.el
:END:
** lexical binding
Always use lexical binding. *ALWAYS*.
#+begin_src elisp
;; -*- lexical-binding: t -*-
#+end_src

** visuals
*** toolbar
Don't show toolbar.

#+begin_src elisp
(tool-bar-mode -1)
#+end_src

*** theme
The type of theme (light or dark) accompanies the day-night cycle (in theory, at least). I want to get the coordinates to be automatic, at some point. Maybe by calling an external [[id:5b304736-46f1-4c24-a62b-d68f98fda37a][nushell]] script or something.

The advice ensures that the color palette is available to the user as global variables of each color.

#+begin_src elisp
(add-to-list 'custom-theme-load-path
  (expand-file-name "themes/" user-emacs-directory))

(add-to-list 'load-path
  (expand-file-name "themes/" user-emacs-directory))

(use-package autothemer
  :config
  (define-advice autothemer-deftheme
      (:before (_ _ palette &rest _) defcolors)
    (mapcar (lambda (e)
              (setf (symbol-value (head e)) (nth 2 e)))
            (tail palette))))

(cl-defun yeet/get-geolocation ()
  (with-temp-buffer
    (call-process "whereami" nil (current-buffer) t)
    (json-parse-string (buffer-string))))

(use-package theme-changer
  :after autothemer
  :config
  (let ((map (yeet/get-geolocation)))
    (setq calendar-latitude  (map-elt map "lat")
          calendar-longitude (map-elt map "lon")))
  (change-theme 'battery-light 'battery-dark))
#+end_src

*** frames
Set the window of graphical frames. Frames should be resized pixel-by-pixel, rather than by character, or whatever Emacs does by default. Set default geometry of a new frame.

#+begin_src elisp
(setq frame-title-format
      '(buffer-line-name "Emacs %b (%f)" "Emacs %b")
      frame-resize-pixelwise t)

(map-put default-frame-alist 'width  40)
(map-put default-frame-alist 'height 22)
#+end_src

*** git status
Show git status of lines on the left side of the windows. Change the default ugly signs to ASCII ones. This should be enabled for all modes derived from src_elisp{`prog-mode'}.

#+begin_src elisp
(use-package git-gutter
  :hook (prog-mode . git-gutter-mode)
  :config
  (setq git-gutter:added-sign "+"
        git-gutter:modified-sign "~"
        git-gutter:deleted-sign "-"
        git-gutter:update-interval 0.02))

(use-package git-gutter-fringe
  :defer t
  :config
  (define-fringe-bitmap 'git-gutter-fr:added    [224] nil nil '(center repeated))
  (define-fringe-bitmap 'git-gutter-fr:modified [224] nil nil '(center repeated))
  (define-fringe-bitmap 'git-gutter-fr:deleted  [128 192 224 240] nil nil 'bottom))
#+end_src

#+begin_src elisp :tangle ~/config/emacs/themes/battery.el
(git-gutter:added     (:foreground higher-green :weight 'bold))
(git-gutter:modified  (:foreground higher-purple :weight 'bold))
(git-gutter:deleted   (:foreground higher-red :weight 'bold))
(git-gutter:separator (:weight 'bold :foreground lighter-cyan :inherit 'default))
(git-gutter:unchanged (:background lighter-olive :inherit 'default))
#+end_src

*** modeline
#+begin_src elisp
(defface yeet/mode-line-buffer-name
  `((t :inherit 'default))
  "Background color lightest yellow.")

(defface yeet/mode-line-readable-buffer
  `((t :inherit 'default))
  "Background color lightest yellow.")

(defface yeet/mode-line-writeable-buffer
  `((t :inherit 'default))
  "Background color lightest yellow.")

(defface yeet/mode-line-executable-buffer
  `((t :inherit 'default))
  "Background color lightest yellow.")

(defface yeet/mode-line-shadow
  `((t :inherit 'default))
  "Background color lightest yellow.")
#+end_src

#+begin_src elisp :tangle ~/config/emacs/themes/battery.el
(yeet/mode-line-buffer-name       (:background lighter-yellow))
(yeet/mode-line-readable-buffer   (:foreground darker-red :weight 'bold))
(yeet/mode-line-writeable-buffer  (:foreground darker-yellow :weight 'bold))
(yeet/mode-line-executable-buffer (:foreground darker-olive :weight 'bold))
(yeet/mode-line-shadow            (:foreground neutral6))
#+end_src

#+begin_src elisp
;; include column number in mode-line coordinates
(setq column-number-mode t)

(use-package minions)

(defun yeet/make-file-executable (file-path)
  (set-file-modes file-path
    (logior
     (file-modes file-path)
     (logand ?\111 (default-file-modes)))))

(define-key global-map
 [menu-bar file make-executable]
 '("Make File Executable" . yeet/make-file-executable))

(setq-default mode-line-format
  '((:eval (meow-indicator))
    (:eval
     (if (buffer-modified-p)
       (propertize " %b:%l:%c " 'face 'yeet/mode-line-buffer-name
                   'help-echo (concat "Buffer " (buffer-file-name) " has been modified"))
       (propertize " %b:%l:%c " 'help-echo (concat "Buffer " (buffer-file-name) " has not been modified"))))
    " "
    "<"
    mode-line-mule-info
    (:eval (propertize "r" 'face 'yeet/mode-line-readable-buffer 'help-echo "Buffer is readable"))
    (:eval
     (if buffer-read-only
       (propertize "-" 'help-echo "Buffer is read-only\nmouse-1: make buffer writeable" 'mouse-face 'mode-line-highlight 'local-map (make-mode-line-mouse-map 'mouse-1 #'mode-line-toggle-read-only))
       (propertize "w" 'face 'yeet/mode-line-writeable-buffer 'help-echo "Buffer is writeable\nmouse-1: make buffer read-only" 'mouse-face 'mode-line-highlight 'local-map (make-mode-line-mouse-map 'mouse-1 #'mode-line-toggle-read-only))))
    (:eval
     (if (and (buffer-file-name) (file-executable-p (buffer-file-name)))
         (propertize "x" 'face 'yeet/mode-line-executable-buffer 'help-echo "Buffer is executable")
       (propertize "-"
         'help-echo "Buffer is not executable\nmouse-1: make buffer file executable"
         'mouse-face 'mode-line-highlight
         'local-map (make-mode-line-mouse-map 'mouse-1
                      (lambda () (interactive)
                        (yeet/make-file-executable (buffer-file-name)))))))
    ">"
    " "
    "%p/%IB"
    " "
    mode-line-misc-info
    " "
    minions-mode-line-modes))

(use-package hide-mode-line
  :commands hide-mode-line-mode)
#+end_src

*** fonts
I don't know if this is the best way of doing this. I would want to do something more declarative, rather.

#+begin_src elisp
;; nil means all frames
(set-face-attribute 'default nil
 :family "SauceCodePro Nerd Font Mono" :height 100)

(set-face-attribute 'fixed-pitch nil :inherit 'default)

(set-face-attribute 'variable-pitch nil
 :family "NotoSans Display Nerd Font" :height 105)

;; set font for character sets from languages of East Asia
;; t to use the default fontset
(set-fontset-font t 'unicode  (font-spec :family "Noto Color Emoji"))
(set-fontset-font t 'han      (font-spec :family "Noto Sans Mono CJK SC"))
(set-fontset-font t 'kana     (font-spec :family "Noto Sans Mono CJK JP"))
(set-fontset-font t 'hangul   (font-spec :family "Noto Sans Mono CJK KR"))
(set-fontset-font t 'cjk-misc (font-spec :family "Noto Sans Mono CJK KR"))
#+end_src

*** line numbers
#+begin_src elisp
(use-package display-line-numbers
  :elpaca nil
  :bind ("C-c t l" . display-line-numbers-mode)
  :hook ((c-mode c++-mode) . display-line-numbers-mode)
  :config (setq-default display-line-numbers-width 2))
#+end_src

#+begin_src elisp :tangle ~/config/emacs/themes/battery.el
(line-number              (:foreground grey10 :background bg))
(line-number-current-line (:foreground high-orange :background grey3))
#+end_src

*** scrolling
#+begin_src elisp
(setq scroll-step 1
      scroll-preserve-screen-position t
      scroll-margin 3
      scroll-conservatively 101
      scroll-up-aggressively 0.01
      scrolll-down-aggressively 0.01
      hscroll-step 1
      hscroll-margin 1

      ;; reduce cursor lag
      auto-window-vscroll nil)
#+end_src

*** &rest
#+begin_src elisp
(setq prettify-symbols-unprettify-at-point 'right-edge)

(setq mouse-autoselect-window t)
#+end_src

** directory navigation
=dired-omit-files= matches entries to be hidden. I use this to hide dotfiles by default.

#+begin_src elisp
(use-package dired
  :elpaca nil
  :hook ((dired-mode . auto-revert-mode)
         (dired-mode . dired-hide-details-mode)
         (dired-mode . dired-omit-mode))
  :custom (dired-omit-files (rx bol ?. (not (any ?.)))))
#+end_src

#+begin_src elisp :tangle ~/config/emacs/themes/battery.el
(dired-broken-symlink (:foreground grey1 :background red :bold t))
(dired-symlink        (:foreground cyan))
(dired-directory      (:foreground orange))
(dired-header         (:inherit 'font-lock-type-face))
(dired-mark           (:inherit 'font-lock-constant-face))
(dired-marked         (:inherit 'warning))
(dired-flagged        (:inherit 'error))
(dired-warning        (:inherit 'font-lock-warning-face))
(dired-perm-write     (:inherit 'font-lock-comment-delimiter-face))
(dired-set-id         (:inherit 'font-lock-warning-face))
(dired-special        (:inherit 'font-lock-variable-name-face))
(dired-ignored        (:inherit 'shadow))
#+end_src

** better menus
*** mini buffer selection
The =vertico= package replaces the default minibuffer input area with a *vertical list of items* (a grid is also available). In general, this makes it easier to find things.

#+begin_src elisp
(use-package vertico
  :elpaca (vertico
           :protocol https
           :inherit t
           :depth 1
           :host github
           :files (:defaults "extensions/*")
           :repo "minad/vertico")
  :init (vertico-mode)
  :custom
  (vertico-count 5)
  (vertico-preselect 'prompt))
#+end_src

#+begin_src elisp :tangle ~/config/emacs/themes/battery.el
(vertico-multiline       (:inherit 'shadow))
(vertico-group-title     (:slant 'italic :inherit 'shadow))
(vertico-group-separator (:strike-through t :inherit 'shadow))
(vertico-current         (:extend t :inherit 'highlight))
#+end_src

*** better help
The =helpful= package puts *more information* into the =*Help*= buffers, making the more useful.

#+begin_src elisp
(use-package helpful
  :elpaca (helpful
           :type git
           :host github
           :repo "Wilfred/helpful")
  :bind (("C-h f" . helpful-callable)
         ("C-h v" . helpful-variable)
         ("C-h k" . helpful-key)
         ("C-h x" . helpful-command)))
#+end_src

#+begin_src elisp :tangle ~/config/emacs/themes/battery.el
(helpful-heading (:weight 'bold))
#+end_src

** completions
#+begin_src elisp
(use-package company
  :hook prog-mode
  :custom
  (company-format-margin-function #'company-text-icons-margin)
  (company-selection-wrap-around t)
	(company-minimum-prefix-length 1)
	(company-clang-use-compile-flags-txt t))

(use-package orderless
  :custom
	(completion-styles '(orderless))
	(completion-category-overrrides
   '((file (styles partial-completion)))))
#+end_src

#+begin_src elisp :tangle ~/config/emacs/themes/battery.el
(company-scrollbar-bg                   (:background grey5))
(company-scrollbar-fg                   (:background bg))
(company-tooltip                        (:background bg))
(company-tooltip-annotation             (:foreground high-green))
(company-tooltip-annotation-selection   (:inherit 'company-tooltip-annotation))
(company-tooltip-selection              (:foreground high-purple :background grey5))
(company-tooltip-common                 (:foreground high-orange :underline t))
(company-tooltip-common-selection       (:foreground high-orange :underline t))
(company-tooltip-deprecated             (:strike-through t))
(company-tooltip-search                 (:inherit 'highlight))
(company-tooltip-search-selection       (:inherit 'highlight))
(company-tooltip-mouse                  (:inherit 'highlight))
(company-tooltip-quick-access           (:inherit 'company-tooltip-annotation))
(company-tooltip-quick-access-selection (:inherit 'company-tooltip-annotation-selection))
(company-tooltip-scrollbar-thumb        (:background bg))
(company-tooltip-scrollbar-track        (:background grey10))
(company-preview-common                 (:foreground grey13))
(company-preview                        (:background high-orange))
(company-preview-search                 (:background high-cyan))
(company-template-field                 (:foreground grey0 :background high-yellow))
(company-echo-common                    (:foreground red))
(company-echo nil)
#+end_src

#+begin_src elisp :tangle ~/config/emacs/themes/battery.el
(orderless-match-face-0 (:foreground high-cyan :bold t))
(orderless-match-face-1 (:foreground high-olive :bold t))
(orderless-match-face-2 (:foreground high-orange :bold t))
(orderless-match-face-3 (:foreground high-yellow :bold t))
#+end_src

** org
Don't align block text with heading text. One space of additional indentation on each heading level. "/Fontify/" source block delimiters such that faces can be applied to them. Hide things like /italic/ and *bold* characters.

#+begin_src elisp
(use-package org
  :bind ("C-c o i" . org-id-get-create)
  :hook ((org-mode . org-indent-mode)
         (org-mode . visual-line-mode)
         (org-after-todo-statistics . yeet/org-collect-children-todo)
         (text-scale-mode-hook . yeet/update-org-latex-fragment-scale))
  :custom
  (org-directory "~/doc/note")
  (org-tags-column -68)
  (org-adapt-indentation nil)
  (org-src-preserve-indentation t)
  (org-src-window-setup 'current-window)
  (org-indent-indentation-per-level 1)
  (org-startup-with-inline-images t)
  (org-hide-emphasis-markers t)
  (org-fontify-whole-block-delimiter-line t)
  (org-fontify-done-headline nil)
  (org-fontify-todo-headline nil)
  (org-startup-folded t)
  (org-use-tag-inheritance nil)
  (org-agenda-start-on-weekday nil)
  (org-agenda-span 30)
  (org-agenda-files (list (expand-file-name "todo.org" org-directory)))
  (org-todo-keywords '((sequence "TODO" "DOING" "DONE")))
  (org-todo-keyword-faces '(("DOING" . org-doing)))
  :config
  (defface org-doing
    `((t :inherit 'default))
    "Face for highlighting the DOING org keyword.")

  (defun yeet/org-collect-children-todo (n-done n-not-done)
    "Switch entry to DONE when all subentries are done, DOING when some are done and TODO otherwise."
    (let* (org-log-done
           org-log-states
           (state (cond ((= n-done 0)     "TODO")
                        ((= n-not-done 0) "DONE")
                        (t                "DOING"))))
      (unless (string-equal (org-get-todo-state) state)
        (org-todo state))))
  (add-to-list 'warning-suppress-types '(org-element-cache))
  (defun yeet/update-org-latex-fragment-scale ()
    (let ((text-scale-factor (expt text-scale-mode-step text-scale-mode-amount)))
      (plist-put org-format-latex-options :scale (* 1.2 text-scale-factor)))))

;; contains additional babel sub-packages
(use-package org-contrib
  :after org)

;; copy link at point
(use-package org-cliplink
  :after org
  :bind ("C-c o l c" . org-cliplink))
#+end_src

#+begin_src elisp :tangle ~/config/emacs/themes/battery.el
(org-latex-and-related (:foreground lower-yellow))
(org-document-title    (:foreground high-purple))
(org-block-begin-line  (:foreground grey6 :background grey0))
(org-block-end-line    (:foreground grey6 :background grey0))
(org-special-keyword   (:foreground grey8))
(org-document-info     (:foreground orange))
(org-meta-line         (:foreground grey8))

(org-level-1 (:foreground high-orange))
(org-level-2 (:foreground high-olive))
(org-level-3 (:foreground high-red))
(org-level-4 (:foreground high-yellow))
(org-level-5 (:foreground high-cyan))
(org-level-6 (:foreground high-purple))
(org-level-7 (:foreground high-green))
(org-level-8 (:foreground high-orange))

(org-drawer                    (:foreground grey7))
(org-tag                       (:inherit 'org-drawer))
(org-link                      (:underline (:style 'line :color grey5)))
(org-done                      (:foreground grey5))
(org-checkbox-statistics-done  (:inherit 'org-done))
(org-doing                     (:foreground high-yellow))
(org-todo                      (:foreground high-yellow :bold t))
(org-checkbox-statistics-todo  (:foreground higher-purple))
(org-table                     (:foreground grey12))
(org-block                     (:inherit 'default))
(org-footnote                  (:foreground yellow))
(org-default                   (:inherit 'default))
(org-hide                      (:foreground neutral14))
(org-dispatcher-highlight      (:weight 'bold :foreground light-yellow :background neutral3))
(org-property-value nil)
(org-column                    (:weight 'normal :slant 'normal :underline nil :strike-through nil :background grey10))
(org-column-title              (:weight 'bold :underline t :background grey10))
(org-warning                   (:inherit 'font-lock-warning-face))
(org-archived                  (:inherit 'shadow))
(org-cite                      (:inherit 'link))
(org-cite-key                  (:inherit 'link))
(org-ellipsis                  (:underline t :foreground lighter-yellow))
(org-target                    (:underline t))
(org-date                      (:underline t :foreground higher-cyan))
(org-date-selected             (:inverse-video t :foreground lighter-purple))
(org-sexp-date                 (:foreground higher-cyan))
(org-list-dt                   (:weight 'bold))
(org-indent                    (:inherit 'org-hide))
(org-headline-todo             (:foreground higher-purple))
(org-headline-done             (:foreground higher-orange))
(org-priority                  (:inherit 'font-lock-keyword-face))
(org-checkbox                  (:inherit 'bold))
(org-table-header              (:foreground bg :background neutral11 :inherit 'org-table))
(org-formula                   (:foreground high-orange))
(org-code                      (:inherit 'shadow))
(org-document-info-keyword     (:inherit 'shadow))
(org-inline-src-block          (:inherit 'org-block))
(org-verbatim                  (:inherit 'shadow))
(org-quote                     (:inherit 'org-block))
(org-verse                     (:inherit 'org-block))
(org-clock-overlay             (:foreground neutral15 :background grey9))
(org-scheduled                 (:foreground higher-green))
(org-scheduled-today           (:foreground higher-green))
(org-scheduled-previously      (:foreground high-orange))
(org-agenda-dimmed-todo-face   (:foreground neutral8))
(org-imminent-deadline         (:inherit 'org-warning))
(org-upcoming-deadline         (:foreground high-orange))
(org-upcoming-distant-deadline (:inherit 'org-default))
(org-time-grid                 (:foreground lighter-yellow))
(org-macro                     (:inherit 'org-latex-and-related))
(org-tag-group                 (:inherit 'org-tag))
(org-mode-line-clock           (:inherit 'mode-line))
(org-mode-line-clock-overrun   (:background red :inherit 'mode-line))

;; org-agenda
(org-agenda-column-dateline     (:inherit 'org-column))
(org-agenda-done                (:foreground higher-green))
(org-agenda-structure           (:foreground neutral9))
(org-agenda-structure-secondary (:inherit 'org-agenda-structure))
(org-agenda-structure-filter    (:inherit ('org-warning 'org-agenda-structure)))
(org-agenda-date                (:inherit 'org-agenda-structure))
(org-agenda-date-today          (:weight 'bold :slant 'italic :inherit 'org-agenda-date))
(org-agenda-date-weekend-today  (:inherit 'org-agenda-date-today))
(org-agenda-clocking            (:inherit 'secondary-selection))
(org-agenda-date-weekend        (:weight 'bold :inherit 'org-agenda-date))
(org-agenda-current-time        (:inherit 'org-time-grid))
(org-agenda-diary               (:inherit 'default))
(org-agenda-calendar-daterange  (:inherit 'default))
(org-agenda-calendar-event      (:inherit 'default))
(org-agenda-calendar-sexp       (:inherit 'default))
(org-agenda-restriction-lock    (:background neutral1))
(org-agenda-filter-tags         (:inherit 'mode-line))
(org-agenda-filter-category     (:inherit 'mode-line))
(org-agenda-filter-effort       (:inherit 'mode-line))
(org-agenda-filter-regexp       (:inherit 'mode-line))
#+end_src

*** presentation slides

#+begin_src elisp
(use-package org-tree-slide
  :after org
  :bind (("<mouse-9>" . org-tree-slide-move-next-tree)
         ("<mouse-8>" . org-tree-slide-move-previous-tree))
  :custom (org-tree-slide-slide-in-effect nil))
#+end_src

*** block shortcuts
This adds little shortcuts like <s TAB, which create a new source block under point. Saves a lot of time.

#+begin_src elisp
(use-package org-tempo
  :elpaca nil
  :after org)
#+end_src

*** "/relational"/ note taking
We add a new entry to the src_elisp{`display-buffer-alist'} for =org-roam=, such that it's buffer is placed on the right side of the current buffer.

#+begin_src elisp
(use-package org-roam
  :requires org
  :bind (("C-c o r j" . org-roam-dailies-find-today)
         ("C-c o r f" . org-roam-node-find)
         ("C-c o r i" . org-roam-node-insert)
         ("C-c o r w" . yeet/goto-notes-weekly)
         ("C-c o r b" . org-roam-buffer-toggle))
  :config
  (defun yeet/goto-notes-weekly ()
    "Opens current week's `org-roam' entry."
    (interactive)
    (org-roam-dailies-find-today "w"))
  (setq display-buffer-alist
    (map-insert display-buffer-alist "\\*org-roam\\*"
      '((display-buffer-in-side-window)
        (side . right)
        (slot . 0)
        (window-width . 0.33)
        (window-parameters
          . ((no-other-window . t)
             (no-delete-other-windows . t))))))
  :custom
  (org-roam-directory org-directory)
  (org-roam-dailies-directory "journal/")
  (org-roam-file-exclude-regexp '("\\.stfolder" "\\.stignore" "\\.stversions" "data/"))
  (org-roam-capture-templates
   '(("r" "random"  entry "* ${title}%?" :target (file "random.org"))
     ("p" "persona" plain "%?"
      :target (file+head "persona/${slug}.org" "#+title: ${title}\n#+filetags: :persona:\n"))
     ("m" "music")
     ("ml" "list" plain "%?"
      :target (file+head "music/list/${slug}.org" "#+title: ${title}\n#+filetags: :music:list:\n"))
     ("mt" "track" plain "%?"
      :target (file+head "music/track/${slug}.org" "#+title: ${title}\n#+filetags: :music:track:\n"))
     ("f" "film")
     ("fa" "anime" plain "%?"
      :target (file+head "film/anime/${slug}.org" "#+title: ${title}\n#+filetags: :film:anime:\n"))
     ("fc" "Cartoon" plain "%?"
      :target (file+head "film/cartoon/${slug}.org" "#+title: ${title}\n#+filetags: :film:cartoon:\n"))
     ("fm" "movie" plain "%?"
      :target (file+head "film/movie/${slug}.org" "#+title: ${title}\n#+filetags: :film:movie:\n"))
     ("l" "literature")
     ("lb" "book" plain "%?"
      :target (file+head "literature/book/${slug}.org" "#+title: ${title}\n#+filetags: :literature:book:\n"))
     ("lm" "manga" plain "%?"
      :target (file+head "literature/manga/${slug}.org" "#+title: ${title}\n#+filetags: :literature:manga:\n"))))
  (org-roam-dailies-capture-templates
   '(("t" "Daily journal" entry "* %?"
      :target (file+head "%<%d-%m-%Y->.org" "#+title: %<%d-%m-%Y>\n#+filetags: :journal:\n"))
     ("w" "Weekly journal" plain "* %?"
      :target (file+head "%<%Y-W%U>.org" "#+title: %<%U>th week of %<%Y>\n#+filetags: :journal:\n")))))

(use-package org-roam-ui
  :after org-roam
  :commands org-roam-ui-mode
  :custom (org-roam-ui-sync-theme t))
#+end_src

#+begin_src elisp :tangle ~/config/emacs/themes/battery.el
(org-roam-shielded                  (:inherit ('warning)))
(org-roam-header-line               (:weight 'bold :extend t :foreground higher-yellow))
(org-roam-title                     (:weight 'bold))
(org-roam-olp                       (:foreground grey9))
(org-roam-preview-heading           (:extend t :foreground neutral10 :background neutral4))
(org-roam-preview-heading-highlight (:extend t :foreground neutral10 :background grey9))
(org-roam-preview-heading-selection (:extend t :foreground light-orange :inherit 'org-roam-preview-heading-highlight))
(org-roam-preview-region            (:extend t :inherit 'bold))
(org-roam-dim                       (:foreground grey9))
(org-roam-dailies-calendar-note     (:underline nil :inherit ('org-link)))
#+end_src

*** source code execution and literate programming
#+begin_src elisp
;; org-babel
(use-package ob
  :elpaca nil
  :after org
  :custom
  (org-babel-load-languages
   '((R . t)
     (emacs-lisp . t)
     (shell . t)))
  (org-confirm-babel-evaluate nil))

(use-package ob-async :after ob)

;; automatically tangle blocks when saving buffer
(use-package org-auto-tangle
  :disabled
  :after org
  :hook (org-mode . org-auto-tangle-mode))
#+end_src

*** TODO alignment and line wrapping
Have to find a better way to load src_elisp{`org-phscroll'}.

#+begin_src elisp
(use-package olivetti
  :hook (org-mode . olivetti-mode)
  :custom (olivetti-body-width
           (+ 4 (- org-tags-column))))

(use-package phscroll
  :elpaca (phscroll
           :type git
           :host github
           :repo "misohena/phscroll")
	:after org
  :config (require 'org-phscroll))
#+end_src

#+begin_src elisp :tangle ~/config/emacs/themes/battery.el
(olivetti-fringe (:inherit 'fringe))
#+end_src

*** latex fragments
#+begin_src elisp
(use-package org-latex
  :no-require
  :elpaca nil
  :after org
  :config
    ;; latex FIXME
  (setq org-startup-with-latex-preview t
        org-latex-inputenc-alist '(("utf8" . "utf8x"))
        org-preview-latex-default-process 'dvisvgm
        org-preview-latex-image-directory (expand-file-name "org-latex/" (xdg-cache-home))
        org-format-latex-options
        (list :foreground 'default
              :background "Transparent"
              :scale 1.2
              :html-foreground "Black"
              :html-background "Transparent"
              :html-scale 1.0
              :matchers '("begin" "$1" "$" "$$" "\\(" "\\[")))
  ;; specify the justification you want
  (plist-put org-format-latex-options :justify 'center)

  (defun org-justify-fragment-overlay (beg end image imagetype)
    "Adjust the justification of a LaTeX fragment.
The justification is set by :justify in
`org-format-latex-options'. Only equations at the beginning of a
line are justified."
    (cond
     ;; Centered justification
     ((and (eq 'center (plist-get org-format-latex-options :justify))
           (= beg (line-beginning-position)))
      (let* ((img (create-image image 'imagemagick t))
             (width (car (image-size img)))
             (offset (floor (- (/ (window-text-width) 2) (/ width 2)))))
        (overlay-put (ov-at) 'before-string (make-string offset ? ))))
     ;; Right justification
     ((and (eq 'right (plist-get org-format-latex-options :justify))
           (= beg (line-beginning-position)))
      (let* ((img (create-image image 'imagemagick t))
             (width (car (image-display-size (overlay-get (ov-at) 'display))))
             (offset (floor (- (window-text-width) width (- (line-end-position) end)))))
        (overlay-put (ov-at) 'before-string (make-string offset ? ))))))

  (defun org-latex-fragment-tooltip (beg end image imagetype)
    "Add the fragment tooltip to the overlay and set click function to toggle it."
    (overlay-put (ov-at) 'help-echo
                 (concat (buffer-substring beg end)
                         "mouse-1 to toggle."))
    (overlay-put (ov-at) 'local-map (let ((map (make-sparse-keymap)))
                                      (define-key map [mouse-1]
                                        `(lambda ()
                                           (interactive)
                                           (org-remove-latex-fragment-image-overlays ,beg ,end)))
                                      map)))

  ;; advise the function to a
  (advice-add 'org--format-latex-make-overlay :after 'org-justify-fragment-overlay)
  (advice-add 'org--format-latex-make-overlay :after 'org-latex-fragment-tooltip))

(use-package math-preview
  :disabled
  :custom
  (math-preview-command "/home/goiabae/var/npm/bin/math-preview")
  (math-preview-scale 1.1))

;; auto generate inline latex images
(use-package org-fragtog
  ; :disabled
  :after org
  :hook (org-mode . org-fragtog-mode))
#+end_src

*** FIXME spell checker
For some reason, it can't detect the =pt_BR= dictionary, which makes this useless for me.

#+begin_src elisp :tangle no
(use-package ispell
  :disabled
  :elpaca nil
  :hook (org-mode . flyspell-mode)
  :config
  ;; csv of dictionaries
  (setq ispell-dictionary
        (c-concat-separated
         '("en_US"
           ; "pt_BR"
           )
         ","))
  (ispell-set-spellchecker-params)
  (ispell-hunspell-add-multi-dic ispell-dictionary))
#+end_src

** eshell
#+begin_src elisp
(use-package esh-mode
  :elpaca nil
  :config (setq eshell-directory-name
                (expand-file-name "emacs/eshell/" (xdg-data-home))))
#+end_src

#+begin_src elisp :tangle ~/config/emacs/themes/battery.el
(eshell-prompt        (:foreground cyan))
(eshell-ls-archive    (:foreground grey7))
(eshell-ls-backup     (:foreground grey7))
(eshell-ls-clutter    (:foreground orange :bold t))
(eshell-ls-directory  (:foreground yellow))
(eshell-ls-executable (:bold t))
(eshell-ls-missing    (:foreground high-red :bold t))
(eshell-ls-product    (:foreground low-red))
(eshell-ls-readonly   (:foreground grey7))
(eshell-ls-special    (:foreground high-yellow :bold t))
(eshell-ls-symlink    (:foreground high-red))
(eshell-ls-unreadable (:foreground high-red :bold t))
#+end_src

** highlight comment keywords
Highlight things like TODO, FIXME and NOTE on comments and =org-mode= headings.

#+begin_src elisp
(use-package hl-todo
  :hook (prog-mode . hl-todo-mode)
  :config
  (setq hl-todo-keyword-faces
        '(("TODO"  . success)
          ("FIXME" . error)
          ("NOTE"  . warning)
          ("WARN"  . warning))))
#+end_src

** project management
After having some issues with =eglot= wanting to call a function not in the built-in distribution of package, I've decided to install =project=, instead.

#+begin_src elisp
(use-package project :demand t)
#+end_src

** languages
*** helper functions
#+begin_src elisp
(defun yeet/disable-tabs () (setq indent-tabs-mode nil))
(defun yeet/enable-tabs  () (setq indent-tabs-mode t  ))
#+end_src

*** LSP client
#+begin_src elisp
(use-package eglot
  :after project)
#+end_src

#+begin_src elisp :tangle ~/config/emacs/themes/battery.el
(eglot-highlight-symbol-face           (:inherit 'bold))
(eglot-mode-line                       (:foreground dark-purple :weight 'bold :inherit 'font-lock-constant-face))
(eglot-diagnostic-tag-unnecessary-face (:inherit 'shadow))
(eglot-diagnostic-tag-deprecated-face  (:strike-through t :inherit 'shadow))
(eglot-inlay-hint-face                 (:inherit 'shadow))
(eglot-type-hint-face                  (:inherit 'eglot-inlay-hint-face))
(eglot-parameter-hint-face             (:inherit 'eglot-inlay-hint-face))
#+end_src

*** LISPs
#+begin_src elisp
(defun yeet/lisp-prettify-symbols ()
  (setq-local prettify-symbols-alist '(("lambda" . ?λ)))
  (prettify-symbols-mode))

(use-package rainbow-delimiters
  :hook ((lisp-data-mode clojure-mode) . rainbow-delimiters-mode))
#+end_src

#+begin_src elisp :tangle ~/config/emacs/themes/battery.el
(rainbow-delimiters-base-face nil)
(rainbow-delimiters-base-error-face (:foreground darker-red :inherit 'rainbow-delimiters-base-face))
(rainbow-delimiters-unmatched-face  (:foreground high-red))
(rainbow-delimiters-mismatched-face (:inherit 'rainbow-delimiters-unmatched-face))

(rainbow-delimiters-depth-1-face  (:foreground higher-cyan))
(rainbow-delimiters-depth-2-face  (:foreground higher-purple))
(rainbow-delimiters-depth-3-face  (:foreground higher-green))
(rainbow-delimiters-depth-4-face  (:foreground higher-orange))
(rainbow-delimiters-depth-5-face  (:foreground higher-cyan))
(rainbow-delimiters-depth-6-face  (:foreground higher-purple))
(rainbow-delimiters-depth-7-face  (:foreground higher-green))
(rainbow-delimiters-depth-8-face  (:foreground higher-orange))
(rainbow-delimiters-depth-9-face  (:foreground higher-cyan))
(rainbow-delimiters-depth-10-face (:foreground higher-purple))
(rainbow-delimiters-depth-11-face (:foreground higher-green))
(rainbow-delimiters-depth-12-face (:foreground higher-orange))
#+end_src

**** Clojure
#+begin_src elisp
(use-package clojure-mode
  :commands clojure-mode
  :config
  ;; this makes so that clojure code is always indented relative
  ;; to the indentation of the current root and not to the arguments
  ;; of a function
  (setq clojure-indent-style 'always-indent))
#+end_src

**** Emacs Lisp
#+begin_src elisp
(use-package elisp-mode
  :elpaca nil
  :hook ((emacs-lisp-mode . dash-fontify-mode)
         (emacs-lisp-mode . yeet/disable-tabs)
         (emacs-lisp-mode . yeet/lisp-prettify-symbols)))
#+end_src

**** Common LISP
#+begin_src elisp
(use-package lisp-mode
  :elpaca nil
  :hook ((lisp-mode . yeet/disable-tabs)
         (lisp-mode . yeet/lisp-prettify-symbols)))

(use-package sly
  :after lisp-mode
  :commands sly
  :config (setq inferior-lisp-program "/bin/sbcl"))
#+end_src

#+begin_src elisp :tangle ~/config/emacs/themes/battery.el
(sly-action-face                      (:inherit 'warning))
(sly-part-button-face                 (:inherit 'font-lock-constant-face))
(sly-error-face                       (:underline light-red))
(sly-warning-face                     (:underline (:color high-orange)))
(sly-style-warning-face               (:underline lighter-yellow))
(sly-note-face                        (:underline lighter-yellow))
(sly-db-condition-face                (:inherit 'error))
(sly-db-section-face                  (:inherit 'header-line))
(sly-db-frame-label-face              (:inherit 'shadow))
(sly-db-restart-number-face           (:inherit 'shadow))
(sly-db-restartable-frame-line-face   (:inherit 'font-lock-constant-face))
(sly-mode-line                        (:weight 'bold :inherit 'font-lock-constant-face))
(sly-apropos-symbol                   (:inherit 'sly-part-button-face))
(sly-apropos-label                    (:inherit 'italic))
(sly-mrepl-prompt-face                (:inherit 'font-lock-builtin-face))
(sly-mrepl-note-face                  (:inherit 'font-lock-keyword-face))
(sly-mrepl-output-face                (:foreground fg))
(sly-reader-conditional-face          (:inherit 'font-lock-comment-face))
(sly-stickers-placed-face             (:foreground bg :background neutral11))
(sly-stickers-armed-face              (:strike-through nil :inherit 'hi-blue))
(sly-stickers-recordings-face         (:strike-through nil :inherit 'hi-green))
(sly-stickers-empty-face              (:strike-through nil :inherit 'hi-pink))
(sly-stickers-exited-non-locally-face (:strike-through t :inherit 'sly-stickers-empty-face))

(sly-db-non-restartable-frame-line-face nil)
(sly-db-local-name-face nil)
(sly-db-catch-tag-face nil)
(sly-db-restart-face nil)
(sly-db-frame-line-face nil)
(sly-db-topline-face nil)
#+end_src

*** C/C++
#+begin_src elisp :tangle ~/config/emacs/themes/battery.el
(compilation-error          (:inherit 'error))
(compilation-warning        (:inherit 'warning))
(compilation-info           (:inherit 'success))
(compilation-mode-line-fail (:weight 'bold :foreground red :inherit 'compilation-error))
(compilation-mode-line-run  (:inherit 'compilation-warning))
(compilation-mode-line-exit (:weight 'bold :foreground green :inherit 'compilation-info))
(compilation-line-number    (:inherit 'font-lock-keyword-face))
(compilation-column-number  (:inherit 'font-lock-doc-face))
(c-nonbreakable-space-face (:background dark-red))
#+end_src

#+begin_src elisp
(use-package cc-mode
  :elpaca nil
  :requires eglot
  :hook ((c-mode c++-mode) . eglot-ensure)
  :custom (c-label-minimum-indentation 0)
  :config
  (when (not (locate-file "clangd" exec-path))
    (warn "`clangd' not in `exec-path'. Emacs won't be able to connect to C/C++ LSP server."))
  (add-to-list 'eglot-server-programs
               (cons '(c-mode c++-mode)
                     (lambda ()
                       (list
                        "clangd"
                        "--enable-config"
                        (concat "--compile-commands-dir="
                                (f-join
                                 (project-root (project-current t))
                                 "build/")))))))

;; C/C++
(setq compile-command "make"
      compilation-scroll-output t)

(use-package cmake-mode)

(defun yeet/cmake-prepare (is-release)
  (interactive
   (list (yes-or-no-p "Set build type to Release (otherwise Debug)? ")))
  (let ((default-directory (project-root (project-current t)))
        (compile-command
         (s-join " "
                 (list "cmake" "-S" "." "-B" "build" "-Wdeprecated" "-D" (concat "CMAKE_BUILD_TYPE=" (if is-release "Release" "Debug")) "-D" "CMAKE_EXPORT_COMPILE_COMMANDS=1"))))
    (call-interactively 'compile)))

(defun yeet/cmake-build ()
  (interactive)
  (let ((default-directory (project-root (project-current t)))
        (compile-command "cmake --build build"))
    (call-interactively 'compile)))

(use-package clang-format
  :hook ((c-mode c++-mode) . (lambda () (add-hook 'before-save-hook 'clang-format-buffer nil t)))
  :config
  (setq clang-format-style "file"
        ;; if no `.clang-format' is found, don't do anything
        clang-format-fallback-style "none"))

;; debugger
(use-package realgud
  :bind ("C-c d" . realgud:gdb))
#+end_src

#+begin_src elisp :tangle ~/config/emacs/themes/battery.el
(realgud-debugger-running      (:weight 'bold :foreground high-green))
(realgud-debugger-not-running  (:inherit 'font-lock-warning-face))
(realgud-overlay-arrow1        (:inherit 'realgud-debugger-running))
(realgud-overlay-arrow2        (:weight 'bold :foreground grey15))
(realgud-overlay-arrow3        (:foreground grey6))
(realgud-bp-enabled-face       (:weight 'bold :foreground high-red))
(realgud-bp-line-enabled-face  (:box (:color high-red)))
(realgud-bp-disabled-face      (:weight 'bold :foreground grey10))
(realgud-bp-line-disabled-face (:box (:color grey10)))
(realgud-line-numbers          (:inherit 'font-lock-variable-name-face))
(realgud-file-name             (:inherit 'font-lock-preprocessor-face))
(realgud-backtrace-number      (:weight 'bold :foreground bg))
#+end_src

#+begin_src elisp
;; disassembler
(use-package rmsbolt
  :commands rmsbolt)

(use-package yasnippet-snippets)
(use-package yasnippet
  :after yasnippet-snippets
  :hook ((c-mode c++-mode) . yas-minor-mode)
  :config (yas-reload-all))
#+end_src

*** J
On Void Linux this is pretty finnicky since the default name of the console executable is =jc= due to conflicts with other packages.

#+begin_src elisp
(use-package j-mode
  :config (setq j-console-cmd "jconsole"))

(use-package ob-J
  :elpaca nil ;; comes from `'org-contrib'
  :after (ob org-contrib j-mode)
  :custom (org-babel-J-command "jconsole")
  :config (add-to-list 'org-babel-load-languages '(J . t)))
#+end_src

#+begin_src elisp :tangle ~/config/emacs/themes/battery.el
(j-verb-face        (:inherit 'font-lock-builtin-face))
(j-adverb-face      (:inherit 'font-lock-builtin-face))
(j-conjunction-face (:inherit 'font-lock-builtin-face))
(j-other-face       (:inherit 'default))
#+end_src

*** Zig
Zig always indents by 4 spaces. Use =zls= as the language server.

#+begin_src elisp
(use-package zig-mode
  :hook (zig-mode . eglot-ensure)
  :commands zig-mode
  :custom
  (zig-indent-offset 4)
  (zig-format-on-save nil))
#+end_src

*** Lua

#+begin_src elisp :noweb yes
(use-package lua-mode
  :commands lua-mode
  :requires f eglot
  :config
  (setq lua-indent-level 2)
  (add-to-list 'eglot-server-programs
               (cons 'lua-mode
                     (eglot-alternatives
                      (list
                       (list "lua-language-server" "--config-path" (f-join (xdg-config-home) "lua-language-server" "config.lua"))
                       "lua-lsp"))))
  <<disable-formatter>>)
#+end_src

**** TODO fix very annoying formatter
For now, I just disable the =onTypeFormatting= LSP message altogether.

#+name: disable-formatter
#+begin_src elisp :tangle nil
(add-to-list 'eglot-ignored-server-capabilities :documentOnTypeFormattingProvider)
#+end_src

*** Python
When using python on [[id:2929ef7d-0e55-4c9e-8f08-b120d9997f10][Org Mode]] src blocks, import sympy and numpy by default.

#+begin_src elisp
(use-package python
  :elpaca nil
  :config (setq python-indent-offset 2))

(use-package ob-python
  :elpaca nil
  :after (ob org-contrib python)
  :custom
  (org-babel-default-header-args:python
   '((:session  . "none")
     (:results  . "output")
     (:exports  . "code")
     (:cache    . "no")
     (:noweb    . "no")
     (:hlines   . "no")
     (:tangle   . "no")
     (:prologue . "import sympy as sp, numpy as np")))
  :config (add-to-list 'org-babel-load-languages '(python . t)))

(use-package auto-virtualenv
  :after python
  :hook (python-mode . auto-virtualenv-set-virtualenv))
#+end_src

*** Markdown

#+begin_src elisp
(use-package markdown-mode
  :commands markdown-mode
  :mode ("README\\.md\\'" . gfm-mode)
  :init (setq markdown-command "multimarkdown"))
#+end_src

#+begin_src elisp :tangle ~/config/emacs/themes/battery.el
(markdown-header-face-6 (:height 1.0 :inherit 'markdown-header-face))
(markdown-header-face-5 (:height 1.0 :inherit 'markdown-header-face))
(markdown-header-face-4 (:height 1.0 :inherit 'markdown-header-face))
(markdown-header-face-3 (:height 1.0 :inherit 'markdown-header-face))
(markdown-header-face-2 (:height 1.0 :inherit 'markdown-header-face))
(markdown-header-face-1 (:height 1.0 :inherit 'markdown-header-face))
(markdown-header-face (:weight 'bold :inherit ('font-lock-function-name-face)))

(markdown-highlighting-face (:foreground neutral0 :background lighter-olive))

(markdown-html-entity-face        (:inherit 'font-lock-variable-name-face))
(markdown-html-attr-value-face    (:inherit 'font-lock-string-face))
(markdown-html-attr-name-face     (:inherit 'font-lock-variable-name-face))
(markdown-html-tag-delimiter-face (:inherit 'markdown-markup-face))
(markdown-html-tag-name-face      (:inherit 'font-lock-type-face))

(markdown-hr-face (:inherit 'markdown-markup-face))
(markdown-highlight-face (:inherit 'highlight))
(markdown-gfm-checkbox-face (:inherit 'font-lock-builtin-face))
(markdown-metadata-value-face (:inherit 'font-lock-string-face))
(markdown-metadata-key-face (:inherit 'font-lock-variable-name-face))
(markdown-math-face (:inherit 'font-lock-string-face))
(markdown-comment-face (:inherit 'font-lock-comment-face))
(markdown-line-break-face (:underline t :inherit 'font-lock-constant-face))
(markdown-link-title-face (:inherit 'font-lock-comment-face))
(markdown-plain-url-face (:inherit 'markdown-link-face))
(markdown-url-face (:inherit 'font-lock-string-face))
(markdown-footnote-text-face (:inherit 'font-lock-comment-face))
(markdown-footnote-marker-face (:inherit 'markdown-markup-face))
(markdown-reference-face (:inherit 'markdown-markup-face))
(markdown-missing-link-face (:inherit 'font-lock-warning-face))
(markdown-link-face (:inherit 'link))
(markdown-language-info-face (:inherit 'font-lock-string-face))
(markdown-language-keyword-face (:inherit 'font-lock-type-face))
(markdown-table-face (:inherit ('markdown-code-face)))
(markdown-pre-face (:inherit ('markdown-code-face 'font-lock-constant-face)))
(markdown-inline-code-face (:inherit ('markdown-code-face 'font-lock-constant-face)))
(markdown-code-face (:inherit 'fixed-pitch))
(markdown-blockquote-face (:inherit 'font-lock-doc-face))
(markdown-list-face (:inherit 'markdown-markup-face))
(markdown-header-delimiter-face (:inherit 'markdown-markup-face))
(markdown-header-rule-face (:inherit 'markdown-markup-face))
(markdown-markup-face (:weight 'normal :slant 'normal :inherit 'shadow))
(markdown-strike-through-face (:strike-through t))
(markdown-bold-face (:inherit 'bold))
(markdown-italic-face (:inherit 'italic))
#+end_src

*** OCaml

#+begin_src elisp
(use-package tuareg-mode
  :elpaca (tuareg-mode
           :type git
           :host github
           :repo "ocaml/tuareg")
  :commands tuareg-mode)
#+end_src

#+begin_src elisp :tangle ~/config/emacs/themes/battery.el
(tuareg-font-lock-interactive-directive-face (:foreground high-cyan))
(tuareg-font-lock-operator-face              (:foreground grey11))
(tuareg-font-lock-governing-face             (:foreground high-red))
(tuareg-font-double-semicolon-face           (:foreground high-red))
(tuareg-font-lock-module-face                (:foreground high-yellow))
#+end_src

*** &rest
#+begin_src elisp
(use-package     bnf-mode :commands bnf-mode)
(use-package     csv-mode :commands csv-mode)
(use-package haskell-mode :commands haskell-mode)
(use-package    yaml-mode :commands yaml-mode)

(use-package web-mode
  :hook
  (web-mode . (lambda ()
                (add-to-list 'electric-pair-pairs '(?\< . ?\>))))
  :commands web-mode)

(use-package js
  :elpaca nil
  :config (setq js-indent-level 2))

(use-package julia-mode
  :commands julia-mode
  :custom (julia-indent-offset 2)
  :config (add-to-list 'org-babel-load-languages '(julia . t)))

(use-package nix-mode
  :mode "\\.nix\\'"
  :commands nix-mode)

(use-package nushell-mode
  :disabled
  :elpaca (nushell-mode
             :type git
             :host github
             :repo "mrkkrp/emacs-nushell")
  :mode "\\.nu\\'"
  :commands nushell-mode
  :config
  (setq nushell-indent-offset 2))

(use-package nushell-ts-mode
  :elpaca (nushell-ts-mode
           :type git
           :host github
           :repo "herbertjones/nushell-ts-mode")
  :after org
  :config
  ; (require 'nushell-ts-babel)
  (add-to-list 'org-babel-load-languages '(nushell-ts . t)))

(use-package prolog
  :elpaca nil
  :commands prolog-mode
  :mode ("\\.pl\\'" . prolog-mode))

(use-package rust-mode
  :commands rust-mode
  :config (setq rust-indent-offset 2))

(use-package rustic
  :disabled
  :after rust-mode
  :config (setq rustic-lsp-client nil))
#+end_src

** clipboard
Use the X11 clipboard as the default for things like yanking, killing and pasting.

#+begin_src elisp
(setq-default x-select-enable-clipboard t
              x-select-enable-primary nil)
#+end_src

** pop-ups
Wether or not popups should create new frames instead of splitting windows. May not work with all modes. This is good when using a tiling window manager.

#+begin_src elisp
(setq-default pop-up-frames nil
              pop-up-windows t)
#+end_src

** TODO bell
Variable src_elisp{`visible-bell'} doesn't seem to have any effect. Maybe my theme does not respond well? Will have to test this with Adwaita. The src_elisp{`ring-bell'} function flashes the mode-line in inverted colors.

This is triggered by events such as trying to src_elisp{`delete-backward-char'} on empty modeline buffer.

#+begin_src elisp
(setq visible-bell nil
      ring-bell-function
      #'(lambda ()
          (invert-face 'mode-line)
          (run-with-timer 0.1 nil #'invert-face 'mode-line)))
#+end_src

** apropos
#+begin_src elisp
(setq-default apropos-do-all t)
#+end_src

** disable startup message
Stop Emacs' default startup message from appearing in the src_elisp{`*Messages'} buffer.

#+begin_src elisp
(unless (daemonp)
  (advice-add #'display-startup-echo-area-message :override #'ignore))
#+end_src

** external programs
Open some file types using external programs.

#+begin_src elisp
(use-package openwith
  :custom
  (openwith-associations
   `((,(rx ".pdf") "xdg-open" (file))
     (,(rx ".mp3") "deadbeef" (file))
     (,(rx (or ".mpeg" ".avi" ".wmv" ".mp4" ".mkv")) "mpv" (file))
     (,(rx (or ".jpg" ".jpeg" ".webp" ".gif")) "imv" (file))))
  :init (openwith-mode t))
#+end_src

** email
#+begin_src elisp
(use-package himalaya
  :elpaca (himalaya
             :type git
             :host github
             :repo "dantecatalfamo/himalaya-emacs")
  :commands himalaya
  :bind ("C-c e l" . himalaya))
#+end_src

** side minimap
#+begin_src elisp
(use-package minimap
  :custom
  (minimap-window-location 'right)
  (minimap-update-delay 0.5))
#+end_src

#+begin_src elisp :tangle ~/config/emacs/themes/battery.el
(minimap-semantic-type-face       (:height 2.75 :box (:line-width 1 :color grey15) :background grey0 :inherit ('font-lock-function-name-face 'minimap-font-face)))
(minimap-semantic-variable-face   (:height 2.75 :box (:line-width 1 :color grey15) :background grey0 :inherit ('font-lock-function-name-face 'minimap-font-face)))
(minimap-semantic-function-face   (:height 2.75 :box (:line-width 1 :color grey15) :background grey0 :inherit ('font-lock-function-name-face 'minimap-font-face)))
(minimap-active-region-background (:extend t :background grey3))
(minimap-current-line-face        (:background grey6))
(minimap-font-face                (:height 20 :inherit 'default))
(minimap-active-region            (:background grey8))
#+end_src

** git interface
#+begin_src elisp
(use-package magit)
#+end_src

#+begin_src elisp :tangle ~/config/emacs/themes/battery.el
(magit-section-highlight         (:extend t :background grey1))
(magit-section-heading           (:weight 'bold :extend t :foreground higher-yellow))
(magit-section-secondary-heading (:weight 'bold :extend t))
(magit-section-heading-selection (:extend t :foreground high-orange))
(magit-section-child-count nil)

(magit-blame-date nil)
(magit-blame-name nil)
(magit-blame-hash nil)
(magit-blame-summary nil)
(magit-blame-heading   (:weight 'normal :slant 'normal :extend t :inherit 'magit-blame-highlight))
(magit-blame-dimmed    (:weight 'normal :slant 'normal :inherit 'magit-dimmed))
(magit-blame-margin    (:weight 'normal :slant 'normal :inherit 'magit-blame-highlight))
(magit-blame-highlight (:extend t :foreground grey0 :background grey11))

(magit-reflog-other       (:foreground higher-cyan))
(magit-reflog-remote      (:foreground higher-cyan))
(magit-reflog-cherry-pick (:foreground higher-green))
(magit-reflog-rebase      (:foreground high-purple))
(magit-reflog-reset       (:foreground red))
(magit-reflog-checkout    (:foreground grey4))
(magit-reflog-merge       (:foreground higher-green))
(magit-reflog-amend       (:foreground high-purple))
(magit-reflog-commit      (:foreground higher-green))

(magit-bisect-bad  (:foreground low-purple))
(magit-bisect-skip (:foreground yellow))
(magit-bisect-good (:foreground low-green))

(magit-sequence-exec (:inherit 'magit-hash))
(magit-sequence-onto (:inherit 'magit-sequence-done))
(magit-sequence-done (:inherit 'magit-hash))
(magit-sequence-drop (:foreground purple))
(magit-sequence-head (:foreground grey9))
(magit-sequence-part (:foreground low-yellow))
(magit-sequence-stop (:foreground green))
(magit-sequence-pick (:inherit 'default))

(magit-cherry-equivalent (:foreground high-purple))
(magit-cherry-unmatched  (:foreground higher-cyan))

(magit-signature-error       (:foreground grey15))
(magit-signature-revoked     (:foreground low-purple))
(magit-signature-expired-key (:inherit 'magit-signature-expired))
(magit-signature-expired     (:foreground yellow))
(magit-signature-untrusted   (:foreground higher-cyan))
(magit-signature-bad         (:weight 'bold :foreground red))
(magit-signature-good        (:foreground higher-green))

(magit-keyword-squash (:inherit 'font-lock-warning-face))
(magit-keyword        (:inherit 'font-lock-string-face))

(magit-refname         (:foreground grey10))
(magit-refname-pullreq (:inherit 'magit-refname))
(magit-refname-wip     (:inherit 'magit-refname))
(magit-refname-stash   (:inherit 'magit-refname))

(magit-filename                (:weight 'normal))
(magit-head                    (:inherit 'magit-branch-local))
(magit-tag                     (:foreground low-yellow))
(magit-hash                    (:foreground grey9))
(magit-dimmed                  (:foreground grey8))
(magit-mode-line-process-error (:inherit 'error))
(magit-mode-line-process       (:inherit 'mode-line-emphasis))
(magit-process-ng              (:foreground red :inherit 'magit-section-heading))
(magit-process-ok              (:foreground higher-green :inherit 'magit-section-heading))

(magit-branch-warning     (:inherit 'warning))
(magit-branch-upstream    (:slant 'italic))
(magit-branch-local       (:foreground grey9))
(magit-branch-current     (:box 1 :inherit 'magit-branch-local))
(magit-branch-remote      (:foreground high-green))
(magit-branch-remote-head (:box 1 :inherit 'magit-branch-remote))

(magit-header-line-key        (:inherit 'font-lock-builtin-face))
(magit-header-line            (:inherit 'magit-section-heading))
(magit-header-line-log-select (:inherit 'bold))
(magit-log-date               (:weight 'normal :slant 'normal :foreground grey5))
(magit-log-author             (:weight 'normal :slant 'normal :foreground low-red))
(magit-log-graph              (:foreground grey5))

(magit-diffstat-removed                (:foreground low-red))
(magit-diffstat-added                  (:foreground green))
(magit-diff-whitespace-warning         (:inherit 'trailing-whitespace))
(magit-diff-context-highlight          (:extend t :foreground grey8 :background grey15))
(magit-diff-their-highlight            (:inherit 'magit-diff-added-highlight))
(magit-diff-base-highlight             (:extend t :foreground high-olive :background grey13))
(magit-diff-our-highlight              (:inherit 'magit-diff-removed-highlight))
(magit-diff-removed-highlight          (:extend t :foreground low-red :background higher-purple))
(magit-diff-added-highlight            (:extend t :foreground green :background higher-cyan))
(magit-diff-context                    (:extend t :foreground grey8))
(magit-diff-their                      (:inherit 'magit-diff-added))
(magit-diff-base                       (:extend t :foreground high-olive :background grey14))
(magit-diff-our                        (:inherit 'magit-diff-removed))
(magit-diff-removed                    (:extend t :foreground low-red :background higher-purple))
(magit-diff-added                      (:extend t :foreground green :background higher-cyan))
(magit-diff-conflict-heading           (:inherit 'magit-diff-hunk-heading))
(magit-diff-lines-boundary             (:extend t :inherit 'magit-diff-lines-heading))
(magit-diff-lines-heading              (:extend t :background high-orange :inherit 'magit-diff-hunk-heading-highlight))
(magit-diff-revision-summary-highlight (:inherit 'magit-diff-hunk-heading-highlight))
(magit-diff-revision-summary           (:inherit 'magit-diff-hunk-heading))
(magit-diff-hunk-region                (:extend t :inherit 'bold))
(magit-diff-hunk-heading-selection     (:extend t :foreground low-orange :inherit 'magit-diff-hunk-heading-highlight))
(magit-diff-hunk-heading-highlight     (:extend t :foreground grey3 :background grey11))
(magit-diff-hunk-heading               (:extend t :foreground grey3 :background grey15))
(magit-diff-file-heading-selection     (:extend t :foreground low-orange :inherit 'magit-diff-file-heading-highlight))
(magit-diff-file-heading-highlight     (:extend t :inherit 'magit-section-highlight))
(magit-diff-file-heading               (:weight 'bold :extend t))
#+end_src

** vterm
#+begin_src elisp
(use-package vterm)
#+end_src

#+begin_src elisp :tangle ~/config/emacs/themes/battery.el
(vterm-color-cyan    (:foreground cyan))
(vterm-color-green   (:foreground olive))
(vterm-color-black   (:foreground grey2))
(vterm-color-blue    (:foreground orange))
(vterm-color-red     (:foreground red))
(vterm-color-yellow  (:foreground yellow))
(vterm-color-white   (:foreground grey11))
(vterm-color-magenta (:foreground purple))
#+end_src

** rest
#+begin_src elisp
(defun yeet/open-music ()
  (interactive) (find-file "~/doc/table/music.csv"))

(defun yeet/open-config ()
  (interactive) (find-file "~/config/emacs.org"))

(bind-keys
 ;; a for "access"?
 ("C-c a m" . yeet/open-music)
 ("C-c a c" . yeet/open-config))

(use-package hypothesis
  :elpaca (hypothesis
           :type git
           :host github
           :repo "Kungsgeten/hypothesis")
  :config
  (setq hypothesis-username "marcofrango"
        hypothesis-token (shell-command-to-string "secret token hypothesis")))

(provide 'full)
#+end_src

* battery postamble

#+begin_src elisp :tangle ~/config/emacs/themes/battery.el
;; message
(message-header-cc (:weight 'bold :foreground lighter-green))
(message-header-newsgroups (:weight 'bold :slant 'italic :foreground lighter-olive))
(message-header-xheader (:foreground neutral9))
(message-separator (:foreground neutral15))
(message-cited-text-1 (:foreground lighter-purple))
(message-cited-text-2 (:foreground green))
(message-cited-text-3 (:foreground yellow))
(message-cited-text-4 (:foreground orange))
(message-mml (:foreground lighter-green))
(message-signature-separator (:weight 'bold))

;; vc
(vc-state-base nil)
(vc-up-to-date-state (:inherit 'vc-state-base))
(vc-needs-update-state (:inherit 'vc-state-base))
(vc-locked-state (:inherit 'vc-state-base))
(vc-locally-added-state (:inherit 'vc-state-base))
(vc-conflict-state (:inherit 'vc-state-base))
(vc-removed-state (:inherit 'vc-state-base))
(vc-missing-state (:inherit 'vc-state-base))
(vc-edited-state (:inherit 'vc-state-base))

;; eww
(eww-form-submit (:box (:line-width 2 :style 'released-button) :foreground bg :background neutral8))
(eww-form-file (:box (:line-width 2 :style 'released-button) :foreground bg :background neutral8))
(eww-form-checkbox (:box (:line-width 2 :style 'released-button) :foreground bg :background neutral11))
(eww-form-select (:box (:line-width 2 :style 'released-button) :foreground bg :background neutral11))
(eww-form-text (:box (:line-width 1) :foreground neutral15 :background grey10))
(eww-form-textarea (:box (:line-width 1) :foreground bg :background neutral11))
(eww-invalid-certificate (:weight 'bold :foreground red))
(eww-valid-certificate (:weight 'bold :foreground green))

;; rst
(rst-block (:inherit 'font-lock-keyword-face))
(rst-external (:inherit 'font-lock-type-face))
(rst-definition (:inherit 'font-lock-function-name-face))
(rst-directive (:inherit 'font-lock-builtin-face))
(rst-comment (:inherit 'font-lock-comment-face))
(rst-emphasis1 (:inherit 'italic))
(rst-emphasis2 (:inherit 'bold))
(rst-literal (:inherit 'font-lock-string-face))
(rst-reference (:inherit 'font-lock-variable-name-face))
(rst-transition (:inherit 'font-lock-keyword-face))
(rst-adornment (:inherit 'font-lock-keyword-face))
(rst-level-1 (:background neutral2))
(rst-level-2 (:background neutral3))
(rst-level-3 (:background grey10))
(rst-level-4 (:background grey9))
(rst-level-5 (:background neutral7))
(rst-level-6 (:background neutral8))

;; transient
(transient-purple (:foreground dark-purple :inherit 'transient-key))
(transient-teal (:foreground neutral6 :inherit 'transient-key))
(transient-pink (:foreground light-purple :inherit 'transient-key))
(transient-amaranth (:foreground red :inherit 'transient-key))
(transient-blue (:foreground neutral4 :inherit 'transient-key))
(transient-red (:foreground red :inherit 'transient-key))
(transient-separator (:extend t :background neutral11))
(transient-higher-level (:underline t))
(transient-disabled-suffix (:weight 'bold :foreground neutral0 :background red))
(transient-enabled-suffix (:weight 'bold :foreground neutral0 :background lighter-green))
(transient-inapt-suffix (:slant 'italic :inherit 'shadow))
(transient-mismatched-key (:underline t))
(transient-nonstandard-key (:underline t))
(transient-unreachable-key (:inherit ('transient-key 'shadow)))
(transient-active-infix (:inherit 'secondary-selection))
(transient-unreachable (:inherit 'shadow))
(transient-inactive-value (:inherit 'shadow))
(transient-inactive-argument (:inherit 'shadow))
(transient-value (:inherit 'font-lock-string-face))
(transient-argument (:inherit 'font-lock-warning-face))
(transient-key (:inherit 'font-lock-builtin-face))
(transient-heading (:inherit 'font-lock-keyword-face))

;; gnus
(gnus-group-news-1-empty (:foreground lighter-cyan))
(gnus-group-news-1 (:weight 'bold :inherit 'gnus-group-news-1-empty))
(gnus-group-news-2-empty (:foreground lighter-cyan))
(gnus-group-news-2 (:weight 'bold :inherit 'gnus-group-news-2-empty))
(gnus-group-news-3-empty nil)
(gnus-group-news-3 (:weight 'bold :inherit 'gnus-group-news-3-empty))
(gnus-group-news-4-empty nil)
(gnus-group-news-4 (:weight 'bold :inherit 'gnus-group-news-4-empty))
(gnus-group-news-5-empty nil)
(gnus-group-news-5 (:weight 'bold :inherit 'gnus-group-news-5-empty))
(gnus-group-news-6-empty nil)
(gnus-group-news-6 (:weight 'bold :inherit 'gnus-group-news-6-empty))
(gnus-group-news-low-empty (:foreground lighter-cyan))
(gnus-group-news-low (:weight 'bold :inherit 'gnus-group-news-low-empty))
(gnus-group-mail-1-empty (:foreground lighter-cyan))
(gnus-group-mail-1 (:weight 'bold :inherit 'gnus-group-mail-1-empty))
(gnus-group-mail-2-empty (:foreground lighter-green))
(gnus-group-mail-2 (:weight 'bold :inherit 'gnus-group-mail-2-empty))
(gnus-group-mail-3-empty (:foreground lighter-green))
(gnus-group-mail-3 (:weight 'bold :inherit 'gnus-group-mail-3-empty))
(gnus-group-mail-low-empty (:foreground lighter-green))
(gnus-group-mail-low (:weight 'bold :inherit 'gnus-group-mail-low-empty))
(gnus-summary-selected (:underline t :extend t))
(gnus-summary-cancelled (:extend t :foreground lighter-olive :background bg))
(gnus-summary-normal-ticked (:extend t :foreground lighter-purple))
(gnus-summary-high-ticked (:weight 'bold :inherit 'gnus-summary-normal-ticked))
(gnus-summary-low-ticked (:slant 'italic :inherit 'gnus-summary-normal-ticked))
(gnus-summary-normal-ancient (:extend t :foreground neutral11))
(gnus-summary-high-ancient (:weight 'bold :inherit 'gnus-summary-normal-ancient))
(gnus-summary-low-ancient (:slant 'italic :inherit 'gnus-summary-normal-ancient))
(gnus-summary-normal-undownloaded (:weight 'normal :extend t :foreground cyan))
(gnus-summary-high-undownloaded (:weight 'bold :inherit 'gnus-summary-normal-undownloaded))
(gnus-summary-low-undownloaded (:slant 'italic :inherit 'gnus-summary-normal-undownloaded))
(gnus-summary-normal-unread (:extend t))
(gnus-summary-high-unread (:weight 'bold :inherit 'gnus-summary-normal-unread))
(gnus-summary-low-unread (:slant 'italic :inherit 'gnus-summary-normal-unread))
(gnus-summary-normal-read (:extend t :foreground lighter-green))
(gnus-summary-high-read (:weight 'bold :inherit 'gnus-summary-normal-read))
(gnus-summary-low-read (:slant 'italic :inherit 'gnus-summary-normal-read))
(gnus-splash (:foreground neutral11))
(gnus-emphasis-bold (:weight 'bold))
(gnus-emphasis-italic (:slant 'italic))
(gnus-emphasis-underline (:underline t))
(gnus-emphasis-underline-bold (:weight 'bold :underline t))
(gnus-emphasis-underline-italic (:slant 'italic :underline t))
(gnus-emphasis-bold-italic (:weight 'bold :slant 'italic))
(gnus-emphasis-underline-bold-italic (:weight 'bold :slant 'italic :underline t))
(gnus-emphasis-strikethru (:strike-through t))
(gnus-emphasis-highlight-words (:foreground lighter-olive :background bg))
(gnus-button (:weight 'bold))
(gnus-signature (:slant 'italic))
(gnus-header-from (:foreground lighter-green))
(gnus-header-subject (:foreground lighter-green))
(gnus-header-newsgroups (:slant 'italic :foreground lighter-olive))
(gnus-header-name (:foreground lighter-green))
(gnus-header-content (:slant 'italic :foreground lighter-green))

(line-number-major-tick (:weight 'bold :background neutral11))
(line-number-minor-tick (:weight 'bold :background neutral8))

(fill-column-indicator (:weight 'normal :slant 'normal :underline nil :overline nil :strike-through nil :box nil :inverse-video nil :stipple nil :inherit 'shadow))

(nobreak-space (:underline t :inherit 'escape-glyph))
(nobreak-hyphen (:foreground lighter-cyan))

(mode-line-highlight (:box (:line-width 2 :color neutral6 :style 'released-button)))
(mode-line-emphasis (:weight 'bold))
(mode-line-buffer-id (:weight 'bold))

(csv-separator-face (:foreground high-cyan))

;; tty-menu
(tty-menu-enabled-face (:weight 'bold :foreground lighter-olive :background neutral4))
(tty-menu-disabled-face (:foreground neutral11 :background neutral4))
(tty-menu-selected-face (:background red))

;; show-paren
(show-paren-match-expression (:inherit 'show-paren-match))
(show-paren-mismatch (:foreground bg :background high-purple))
(show-paren-match (:background low-cyan))

;; completions
(completions-group-title (:slant 'italic :inherit 'shadow))
(completions-group-separator
 (:strike-through t :inherit 'shadow))
(completions-annotations (:inherit ('italic 'shadow)))
(completions-first-difference (:inherit 'bold))
(completions-common-part (:foreground grey15))

;; tab-bar
(tab-bar-tab (:box (:line-width 1 :style 'released-button) :inherit 'tab-bar))
(tab-bar-tab-inactive (:background neutral11 :inherit 'tab-bar-tab))
(tab-bar-tab-group-current (:weight 'bold :box nil :inherit 'tab-bar-tab))
(tab-bar-tab-group-inactive (:inherit ('shadow 'tab-bar-tab-inactive)))
(tab-bar-tab-ungrouped (:inherit ('shadow 'tab-bar-tab-inactive)))
(tab-bar (:foreground bg :background neutral15 :inherit 'variable-pitch))

;; calendar
(calendar-today (:underline t))
(calendar-weekday-header (:inherit 'font-lock-constant-face))
(calendar-weekend-header (:inherit 'font-lock-comment-face))
(calendar-month-header (:inherit 'font-lock-function-name-face))
(holiday (:background dark-orange))

;; yas
(yas-field-highlight-face (:inherit 'region))
(yas--field-debug-face nil)

;; hl-todo
(hl-todo (:weight 'bold :foreground light-purple))

;; xref
(xref-file-header (:inherit 'compilation-info))
(xref-line-number (:inherit 'compilation-line-number))
(xref-match (:inherit 'match))

;; outline
(outline-1 (:inherit 'font-lock-function-name-face))
(outline-2 (:inherit 'font-lock-variable-name-face))
(outline-3 (:inherit 'font-lock-keyword-face))
(outline-4 (:inherit 'font-lock-comment-face))
(outline-5 (:inherit 'font-lock-type-face))
(outline-6 (:inherit 'font-lock-constant-face))
(outline-7 (:inherit 'font-lock-builtin-face))
(outline-8 (:inherit 'font-lock-string-face))

;; widget
(widget-documentation (:foreground light-green))
(widget-button (:weight 'bold))
(widget-field (:extend t :background grey3))
(widget-single-line-field (:background grey9))
(widget-inactive (:inherit 'shadow))
(widget-button-pressed (:foreground red))

;; epa
(epa-validity-high (:weight 'bold :foreground lighter-cyan))
(epa-validity-medium (:slant 'italic :foreground lighter-cyan))
(epa-validity-low (:slant 'italic))
(epa-validity-disabled (:slant 'italic :inverse-video t))
(epa-string (:foreground neutral15))
(epa-mark (:weight 'bold :foreground yellow))
(epa-field-name (:weight 'bold :foreground lighter-cyan))
(epa-field-body (:slant 'italic :foreground lighter-cyan))

;; shr
(shr-strike-through (:strike-through t))
(shr-link (:inherit 'link))
(shr-selected-link (:background red :inherit 'shr-link))
(shr-abbreviation (:underline (:style 'wave) :inherit 'underline))
(shr-h1 (:height 1.3 :weight 'bold))
(shr-h2 (:weight 'bold))
(shr-h3 (:slant 'italic))
(shr-h4 nil)
(shr-h5 nil)
(shr-h6 nil)

;; speedbar
(speedbar-button-face (:foreground light-green))
(speedbar-file-face (:foreground lighter-cyan))
(speedbar-directory-face (:foreground neutral15))
(speedbar-tag-face (:foreground lighter-olive))
(speedbar-selected-face (:underline t :foreground red))
(speedbar-highlight-face (:background cyan))
(speedbar-separator-face (:overline neutral10 :foreground neutral15 :background neutral4))

;; shortdoc
(shortdoc-heading (:height 1.3 :weight 'bold :inherit 'variable-pitch))
(shortdoc-section (:inherit 'variable-pitch))

;; window-divider
(window-divider-first-pixel (:foreground neutral11))
(window-divider-last-pixel (:foreground grey9))

;; fonts
(fixed-pitch (:family "SauceCodePro Nerd Font Mono" :height 100 :inherit 'default))
(fixed-pitch-serif (:family "Monospace Serif"))
(variable-pitch (:family "NotoSans Display Nerd Font" :height 105))

;; nushell
(nushell-pay-attention-face (:inherit 'font-lock-builtin-face))

;; focus
(focus-unfocused (:inherit 'shadow))
(focus-focused nil)

;; term
(term (:inherit 'default))
(term-bold       (:inherit 'ansi-color-bold))
(term-underline  (:inherit 'ansi-color-underline))
(term-fast-blink (:inherit 'ansi-color-fast-blink))
(term-slow-blink (:inherit 'ansi-color-slow-blink))
(term-italic     (:inherit 'ansi-color-italic))
(term-faint      (:inherit 'ansi-color-faint))

(term-color-black   (:inherit 'ansi-color-black))
(term-color-red     (:inherit 'ansi-color-red))
(term-color-green   (:inherit 'ansi-color-green))
(term-color-yellow  (:inherit 'ansi-color-yellow))
(term-color-blue    (:inherit 'ansi-color-blue))
(term-color-magenta (:inherit 'ansi-color-magenta))
(term-color-cyan    (:inherit 'ansi-color-cyan))
(term-color-white   (:inherit 'ansi-color-white))

(term-color-bright-black   (:inherit 'ansi-color-bright-black))
(term-color-bright-red     (:inherit 'ansi-color-bright-red))
(term-color-bright-green   (:inherit 'ansi-color-bright-green))
(term-color-bright-yellow  (:inherit 'ansi-color-bright-yellow))
(term-color-bright-blue    (:inherit 'ansi-color-bright-blue))
(term-color-bright-magenta (:inherit 'ansi-color-bright-magenta))
(term-color-bright-cyan    (:inherit 'ansi-color-bright-cyan))
(term-color-bright-white   (:inherit 'ansi-color-bright-white))

;; apropos
(apropos-symbol (:inherit 'bold))
(apropos-keybinding (:inherit 'underline))
(apropos-property (:inherit 'font-lock-builtin-face))
(apropos-button (:inherit ('font-lock-variable-name-face 'button)))
(apropos-function-button (:inherit ('font-lock-function-name-face 'button)))
(apropos-variable-button (:inherit ('font-lock-variable-name-face 'button)))
(apropos-user-option-button (:inherit ('font-lock-variable-name-face 'button)))
(apropos-misc-button (:inherit ('font-lock-constant-face 'button)))

;; info
(info-node (:weight 'bold :slant 'italic :foreground neutral15))
(info-title-1 (:height 1.2 :inherit 'info-title-2))
(info-title-2 (:height 1.2 :inherit 'info-title-3))
(info-title-3 (:height 1.2 :inherit 'info-title-4))
(info-title-4 (:weight 'bold :inherit 'variable-pitch))
(info-menu-header (:weight 'bold :inherit 'variable-pitch))
(info-menu-star (:foreground red))
(info-xref (:inherit 'link))
(info-xref-visited (:inherit ('link-visited 'info-xref)))
(info-header-xref (:inherit 'info-xref))
(info-header-node (:inherit 'info-node))
(info-index-match (:inherit 'match))

;; ess
(ess-watch-current-block-face (:inherit 'highlight))
(ess-bp-fringe-recover-face (:foreground dark-purple))
(ess-bp-fringe-browser-face (:foreground neutral3))
(ess-bp-fringe-logger-face (:foreground darker-red))
(ess-bp-fringe-inactive-face (:foreground grey9))
(ess-debug-blink-same-ref-face (:background neutral7))
(ess-debug-blink-ref-not-found-face (:background dark-purple))
(ess-debug-current-debug-line-face (:inherit 'highlight))
(ess-tracebug-last-input-fringe-face (:overline neutral3 :foreground neutral3))
(ess-r-control-flow-keyword-face (:inherit 'ess-keyword-face))
(ess-keyword-face (:inherit 'font-lock-keyword-face))
(ess-matrix-face (:inherit 'font-lock-constant-face))
(ess-constant-face (:inherit 'font-lock-type-face))
(ess-modifiers-face (:inherit 'font-lock-constant-face))
(ess-paren-face (:inherit 'font-lock-constant-face))
(ess-assignment-face (:inherit 'font-lock-constant-face))
(ess-%op%-face (:inherit 'ess-operator-face))
(ess-operator-face (:inherit 'font-lock-constant-face))
(ess-numbers-face (:slant 'normal :inherit 'font-lock-type-face))
(ess-function-call-face (:slant 'normal :inherit 'font-lock-function-name-face))

;; help
(help-key-binding (:foreground high-orange :background grey4 :box (:line-width 1 :color grey6)))
(help-argument-name (:inherit 'italic))
(help-for-help-header (:height 1.26))

;; simple.el
(next-error (:inherit 'region))
(next-error-message (:extend t :inherit 'highlight))
(separator-line (:height 0.1 :background neutral5))

;; faces.el
(mouse nil)
(menu nil)
(border nil)
(scroll-bar nil)
(child-frame-border nil)
(tab-line (:height 0.9 :foreground bg :background neutral15 :inherit 'variable-pitch))
(tool-bar (:box (:line-width 1 :style 'released-button) :foreground bg :background neutral11))

;; w3m
(w3m-form-inactive (:underline t :foreground neutral10))
(w3m-form (:underline t :foreground red))
(w3m-session-selected (:weight 'bold :underline t :foreground neutral15))
(w3m-session-select (:foreground neutral15))
(w3m-error (:weight 'bold :foreground lighter-purple))
(w3m-header-line-background (:background neutral3))
(w3m-header-line-content (:foreground lighter-yellow :background neutral3))
(w3m-header-line-title (:foreground lighter-cyan :background neutral3))
(w3m-unsafe-url-warning (:foreground bg :background lighter-olive))
(w3m-insert (:foreground light-purple))
(w3m-strike-through (:strike-through t))
(w3m-underline (:underline t))
(w3m-italic (:slant 'italic))
(w3m-bold (:weight 'bold))
(w3m-history-current-url (:weight 'bold :underline t :extend t :foreground neutral9 :background neutral6))
(w3m-image-anchor (:background dark-green))
(w3m-image (:foreground lighter-green))
(w3m-current-anchor (:underline (:style 'wave)))
(w3m-arrived-anchor (:weight 'bold :underline t :foreground neutral9))
(w3m-anchor (:weight 'bold :underline t :foreground high-yellow))
(w3m-tab-mouse (:box (:line-width -1 :style 'released-button) :foreground neutral15 :background neutral11))
(w3m-tab-selected-background (:foreground bg :background neutral9))
(w3m-tab-background (:foreground bg :background neutral9))
(w3m-tab-selected-retrieving (:box (:line-width -1 :style 'released-button) :foreground red :background neutral15))
(w3m-tab-selected (:box (:line-width -1 :style 'released-button) :foreground bg :background neutral15))
(w3m-tab-unselected-unseen (:box (:line-width -1 :style 'released-button) :foreground neutral3 :background neutral10))
(w3m-tab-unselected-retrieving (:box (:line-width -1 :style 'released-button) :foreground orange :background neutral10))
(w3m-tab-unselected (:box (:line-width -1 :style 'released-button) :foreground neutral3 :background neutral10))
(w3m-form-button-pressed (:box (:line-width 2 :style 'pressed-button) :foreground bg :background neutral11))
(w3m-form-button-mouse (:box (:line-width 2 :style 'released-button) :foreground bg :background lighter-green))
(w3m-form-button (:box (:line-width 2 :style 'released-button) :foreground bg :background neutral11))

;; tab-line
(tab-line-close-highlight (:foreground red))
(tab-line-highlight (:box (:line-width 1 :style 'released-button) :foreground bg :background neutral15))
(tab-line-tab-current (:background neutral15 :inherit 'tab-line-tab))
(tab-line-tab-group (:box nil :inherit 'tab-line))
(tab-line-tab-modified (:inherit 'font-lock-doc-face))
(tab-line-tab-special (:weight 'normal :slant 'italic))
(tab-line-tab-inactive-alternate (:background neutral9 :inherit 'tab-line-tab-inactive))
(tab-line-tab-inactive (:background neutral11 :inherit 'tab-line-tab))
(tab-line-tab (:box (:line-width 1 :style 'released-button) :inherit 'tab-line))

;; ediff
(ediff-odd-diff-Ancestor (:extend t :background neutral6))
(ediff-odd-diff-C (:extend t :background neutral10))
(ediff-odd-diff-B (:extend t :background neutral11))
(ediff-odd-diff-A (:extend t :background neutral10))
(ediff-even-diff-Ancestor (:extend t :background neutral10))
(ediff-even-diff-C (:extend t :background neutral11))
(ediff-even-diff-B (:extend t :background neutral10))
(ediff-even-diff-A (:extend t :background neutral11))
(ediff-fine-diff-Ancestor (:background cyan))
(ediff-fine-diff-C (:background lighter-olive))
(ediff-fine-diff-B (:background lighter-green))
(ediff-fine-diff-A (:background lighter-purple))
(ediff-current-diff-Ancestor (:extend t :background neutral15))
(ediff-current-diff-C (:extend t :background lighter-olive))
(ediff-current-diff-B (:extend t :background lighter-cyan))
(ediff-current-diff-A (:extend t :background lighter-purple))

;; git-commit
(git-commit-comment-action (:inherit 'bold))
(git-commit-comment-file (:inherit 'git-commit-pseudo-header))
(git-commit-comment-heading (:inherit 'git-commit-known-pseudo-header))
(git-commit-comment-detached (:inherit 'git-commit-comment-branch-local))
(git-commit-comment-branch-remote (:inherit 'font-lock-variable-name-face))
(git-commit-comment-branch-local (:inherit 'font-lock-variable-name-face))
(git-commit-known-pseudo-header (:inherit 'font-lock-keyword-face))
(git-commit-pseudo-header (:inherit 'font-lock-string-face))
(git-commit-keyword (:inherit 'font-lock-string-face))
(git-commit-nonempty-second-line (:inherit 'font-lock-warning-face))
(git-commit-overlong-summary (:inherit 'font-lock-warning-face))
(git-commit-summary (:inherit 'font-lock-type-face))

;; smerge
(smerge-base (:extend t :background lighter-olive))
(smerge-lower (:extend t :background lighter-cyan))
(smerge-markers (:extend t :background neutral15))
(smerge-refined-added (:background lighter-green :inherit 'smerge-refined-change))
(smerge-refined-changed nil)
(smerge-refined-removed (:background lighter-purple :inherit 'smerge-refined-change))
(smerge-upper (:extend t :background lighter-purple))

;; add-log
(change-log-acknowledgment (:inherit 'font-lock-comment-face))
(change-log-conditionals (:inherit 'font-lock-variable-name-face))
(change-log-date (:inherit 'font-lock-string-face))
(change-log-email (:inherit 'font-lock-variable-name-face))
(change-log-file (:inherit 'font-lock-function-name-face))
(change-log-function (:inherit 'font-lock-variable-name-face))
(change-log-list (:inherit 'font-lock-keyword-face))
(change-log-name (:inherit 'font-lock-constant-face))

;; rest
(Info-quoted (:inherit 'fixed-pitch-serif))
(abbrev-table-name (:inherit 'font-lock-function-name-face))
(browse-url-button (:inherit 'link))
(buffer-menu-buffer (:weight 'bold))
(c-annotation-face (:inherit 'font-lock-constant-face))
(comint-highlight-input (:weight 'bold))
(comint-highlight-prompt (:inherit 'minibuffer-prompt))
(completions-highlight (:inherit 'highlight))
(confusingly-reordered (:underline (:style 'wave :color red)))
(diary (:foreground red))
(edebug-disabled-breakpoint (:extend t :background dark-cyan))
(edebug-enabled-breakpoint (:inherit 'highlight))
(edmacro-label (:foreground neutral1 :inherit 'bold))
(eldoc-highlight-function-argument (:inherit 'bold))
(elisp-shorthand-font-lock-face (:foreground lighter-cyan :inherit 'font-lock-keyword-face))
(ert-test-result-expected (:background lighter-green))
(ert-test-result-unexpected (:background red))
(escape-glyph (:foreground higher-purple))
(ffap (:inherit 'highlight))
(file-name-shadow (:inherit 'shadow))
(glyphless-char (:height 0.6))
(header-line-highlight (:inherit 'mode-line-highlight))
(icon (:underline nil))
(icon-button (:box (:line-width '(3 . -1) :color neutral4 :style 'flat-button) :foreground neutral0 :background neutral8 :inherit 'icon))
(log-edit-header (:inherit 'font-lock-keyword-face))
(log-edit-headers-separator (:height 0.1 :extend t :inverse-video t))
(log-edit-summary (:inherit 'font-lock-function-name-face))
(log-edit-unknown-header (:inherit 'font-lock-comment-face))
(log-view-commit-body (:inherit 'font-lock-comment-face))
(log-view-file (:weight 'bold :extend t :background neutral10))
(log-view-message (:extend t :background neutral15))
(mm-command-output (:foreground green))
(mm-uu-extract (:extend t :foreground neutral15 :background dark-green))
(mouse-drag-and-drop-region (:inherit 'region))
(read-multiple-choice-face (:weight 'bold :inherit 'underline))
(rmail-header-name (:inherit 'font-lock-function-name-face))
(rmail-highlight (:inherit 'highlight))
(shell-highlight-undef-alias-face (:inherit ('quote 'font-lock-variable-name-face)))
(shell-highlight-undef-defined-face (:inherit ('quote 'font-lock-function-name-face)))
(shell-highlight-undef-undefined-face (:inherit ('quote 'font-lock-warning-face)))
(tabulated-list-fake-header (:weight 'bold :underline t :overline t))
(textsec-suspicious (:weight 'bold :foreground neutral15 :background red))
(tooltip (:foreground bg :background neutral15 :inherit 'variable-pitch))
(variable-pitch-text (:height 1.1 :inherit 'variable-pitch))
(vc-git-log-edit-summary-max-warning (:inherit 'error))
(vc-git-log-edit-summary-target-warning (:inherit 'warning))
(which-func (:inherit 'font-lock-function-name-face))
#+end_src

#+begin_src elisp :tangle ~/config/emacs/themes/battery.el
     )
    (custom-theme-set-variables
     (quote ,name)
     `(ansi-color-names-vector
       [,red
        ,olive
        ,orange
        ,purple
        ,yellow
        ,green
        ,cyan]))))

(provide 'battery)
;;; battery.el ends here
#+end_src

* light variant
#+begin_src elisp :tangle ~/config/emacs/themes/battery-dark-theme.el
;;; battery-light-theme.el --- Warm, dark and vibrant color scheme for Emacs -*- lexical-binding: t; -*-
;;
;; Copyright (C) 2022 Guilherme Machado
;;
;; Author: Guilherme Machado <https://github.com/goiabae>
;; Maintainer: Guilherme Machado <TODO>
;; Created: fevereiro 02, 2022
;; Version: 0.0.1
;; Keywords: convenience extensions faces files frames outlines
;; Homepage: https://github.com/goiabae/battery-theme
;; Package-Requires: ((autothemer "0.2"))
;;
;; This file is not part of GNU Emacs.
;;
;;; Commentary:

;;  A warm, light and vibrant color scheme inspired by the famous
;;  Gruvbox, from Vim.

;;; Code:
(require 'battery)

(battery-deftheme battery-light "Warm, light and vibrant colour theme" t)

(provide 'battery-light)
;;; battery-light-theme.el ends here
#+end_src

* dark variant
#+begin_src elisp :tangle ~/config/emacs/themes/battery-dark-theme.el
;;; battery-dark.el --- Warm, dark and vibrant color scheme for Emacs -*- lexical-binding: t; -*-
;;
;; Copyright (C) 2022 Guilherme Machado
;;
;; Author: Guilherme Machado <https://github.com/goiabae>
;; Maintainer: Guilherme Machado <TODO>
;; Created: fevereiro 02, 2022
;; Version: 0.0.1
;; Keywords: convenience extensions faces files frames outlines
;; Homepage: https://github.com/goiabae/battery-theme
;; Package-Requires: ((autothemer "0.2"))
;;
;; This file is not part of GNU Emacs.
;;
;;; Commentary:

;;  A warm, dark and vibrant color scheme inspired by the famous
;;  Gruvbox, from Vim.

;;; Code:
(require 'battery)

(battery-deftheme battery-dark "Warm, dark and vibrant colour theme" nil)

(provide 'battery-dark)
;;; battery-dark.el ends here
#+end_src
